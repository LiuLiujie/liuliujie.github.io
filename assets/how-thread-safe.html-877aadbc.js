import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{o as t,c as a,a as e,b as l}from"./app-9e8a13db.js";const r={},s=e("h1",{id:"线程安全如何实现",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#线程安全如何实现","aria-hidden":"true"},"#"),l(" 线程安全如何实现")],-1),c=e("p",null,"线程安全问题的产生本质上是因为多个线程在并发条件下对同一个共享资源的争抢，因此有两种方向来保证线程安全：",-1),n=e("ol",null,[e("li",null,"限制线程对资源的并发访问：这个方向的主要方式是加锁（阻塞），volatile（非阻塞）。"),e("li",null,"将该资源设置为线程独占的：这个方向主要实现方式是TreadLocal。")],-1),_=[s,c,n];function d(i,h){return t(),a("div",null,_)}const m=o(r,[["render",d],["__file","how-thread-safe.html.vue"]]);export{m as default};
