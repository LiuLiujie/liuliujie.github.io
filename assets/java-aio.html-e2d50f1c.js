const n=JSON.parse(`{"key":"v-326166e8","path":"/blogs/java/JavaIO/java-aio.html","title":"Java Asynchronous IO (AIO)","lang":"en-US","frontmatter":{"category":"Computer Science, Programming Language","tag":["Java","Java IO"],"description":"Java Asynchronous IO (AIO) 使用AIO的文件读写 public class AioDemo { public static void main(String[] args) { AioDemo demo = new AioDemo(); demo.writeFile(); demo.readFile(); } // 使用 AsynchronousFileChannel 写入文件 public void writeFile() { // 使用 Paths.get() 获取文件路径 Path path = Paths.get(\\"logs/itwanger/paicoding.txt\\"); try { // 用 AsynchronousFileChannel.open() 打开文件通道，指定写入和创建文件的选项。 AsynchronousFileChannel fileChannel = AsynchronousFileChannel.open(path, StandardOpenOption.WRITE, StandardOpenOption.CREATE); // 将要写入的字符串（\\"学编程就上技术派\\"）转换为 ByteBuffer。 ByteBuffer buffer = StandardCharsets.UTF_8.encode(\\"学编程就上技术派\\"); // 调用 fileChannel.write() 方法将 ByteBuffer 中的内容写入文件。这是一个异步操作，因此需要使用 Future 对象等待写入操作完成。 Future&lt;Integer&gt; result = fileChannel.write(buffer, 0); // 等待写操作完成 result.get(); System.out.println(\\"写入完成\\"); fileChannel.close(); } catch (IOException | InterruptedException | java.util.concurrent.ExecutionException e) { e.printStackTrace(); } } // 使用 AsynchronousFileChannel 读取文件 public void readFile() { Path path = Paths.get(\\"logs/itwanger/paicoding.txt\\"); try { // 指定读取文件的选项。 AsynchronousFileChannel fileChannel = AsynchronousFileChannel.open(path, StandardOpenOption.READ); // 创建一个 ByteBuffer，用于存储从文件中读取的数据。 ByteBuffer buffer = ByteBuffer.allocate(1024); // 调用 fileChannel.read() 方法从文件中异步读取数据。该方法接受一个 CompletionHandler 对象，用于处理异步操作完成后的回调。 fileChannel.read(buffer, 0, buffer, new CompletionHandler&lt;Integer, ByteBuffer&gt;() { @Override public void completed(Integer result, ByteBuffer attachment) { // 在 CompletionHandler 的 completed() 方法中，翻转 ByteBuffer（attachment.flip()），然后使用 Charset.forName(\\"UTF-8\\").decode() 将其解码为字符串并打印。最后，清空缓冲区并关闭文件通道。 attachment.flip(); System.out.println(\\"读取的内容: \\" + StandardCharsets.UTF_8.decode(attachment)); attachment.clear(); try { fileChannel.close(); } catch (IOException e) { e.printStackTrace(); } } @Override public void failed(Throwable exc, ByteBuffer attachment) { // 如果异步读取操作失败，CompletionHandler 的 failed() 方法将被调用，打印错误信息。 System.out.println(\\"读取失败\\"); exc.printStackTrace(); } }); // 等待异步操作完成 Thread.sleep(1000); } catch (IOException | InterruptedException e) { e.printStackTrace(); } } }","head":[["meta",{"property":"og:url","content":"https://blog.yujieliu.com/blogs/java/JavaIO/java-aio.html"}],["meta",{"property":"og:site_name","content":"Yujie's blog"}],["meta",{"property":"og:title","content":"Java Asynchronous IO (AIO)"}],["meta",{"property":"og:description","content":"Java Asynchronous IO (AIO) 使用AIO的文件读写 public class AioDemo { public static void main(String[] args) { AioDemo demo = new AioDemo(); demo.writeFile(); demo.readFile(); } // 使用 AsynchronousFileChannel 写入文件 public void writeFile() { // 使用 Paths.get() 获取文件路径 Path path = Paths.get(\\"logs/itwanger/paicoding.txt\\"); try { // 用 AsynchronousFileChannel.open() 打开文件通道，指定写入和创建文件的选项。 AsynchronousFileChannel fileChannel = AsynchronousFileChannel.open(path, StandardOpenOption.WRITE, StandardOpenOption.CREATE); // 将要写入的字符串（\\"学编程就上技术派\\"）转换为 ByteBuffer。 ByteBuffer buffer = StandardCharsets.UTF_8.encode(\\"学编程就上技术派\\"); // 调用 fileChannel.write() 方法将 ByteBuffer 中的内容写入文件。这是一个异步操作，因此需要使用 Future 对象等待写入操作完成。 Future&lt;Integer&gt; result = fileChannel.write(buffer, 0); // 等待写操作完成 result.get(); System.out.println(\\"写入完成\\"); fileChannel.close(); } catch (IOException | InterruptedException | java.util.concurrent.ExecutionException e) { e.printStackTrace(); } } // 使用 AsynchronousFileChannel 读取文件 public void readFile() { Path path = Paths.get(\\"logs/itwanger/paicoding.txt\\"); try { // 指定读取文件的选项。 AsynchronousFileChannel fileChannel = AsynchronousFileChannel.open(path, StandardOpenOption.READ); // 创建一个 ByteBuffer，用于存储从文件中读取的数据。 ByteBuffer buffer = ByteBuffer.allocate(1024); // 调用 fileChannel.read() 方法从文件中异步读取数据。该方法接受一个 CompletionHandler 对象，用于处理异步操作完成后的回调。 fileChannel.read(buffer, 0, buffer, new CompletionHandler&lt;Integer, ByteBuffer&gt;() { @Override public void completed(Integer result, ByteBuffer attachment) { // 在 CompletionHandler 的 completed() 方法中，翻转 ByteBuffer（attachment.flip()），然后使用 Charset.forName(\\"UTF-8\\").decode() 将其解码为字符串并打印。最后，清空缓冲区并关闭文件通道。 attachment.flip(); System.out.println(\\"读取的内容: \\" + StandardCharsets.UTF_8.decode(attachment)); attachment.clear(); try { fileChannel.close(); } catch (IOException e) { e.printStackTrace(); } } @Override public void failed(Throwable exc, ByteBuffer attachment) { // 如果异步读取操作失败，CompletionHandler 的 failed() 方法将被调用，打印错误信息。 System.out.println(\\"读取失败\\"); exc.printStackTrace(); } }); // 等待异步操作完成 Thread.sleep(1000); } catch (IOException | InterruptedException e) { e.printStackTrace(); } } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-11-25T09:26:15.000Z"}],["meta",{"property":"article:author","content":"Yujie Liu"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"Java IO"}],["meta",{"property":"article:modified_time","content":"2023-11-25T09:26:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java Asynchronous IO (AIO)\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-11-25T09:26:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Yujie Liu\\",\\"url\\":\\"https://blog.yujieliu.com/intro.html\\"}]}"]]},"headers":[{"level":3,"title":"使用AIO的文件读写","slug":"使用aio的文件读写","link":"#使用aio的文件读写","children":[]}],"git":{"createdTime":1700904375000,"updatedTime":1700904375000,"contributors":[{"name":"Yujie","email":"yujie.liu.public@gmail.com","commits":1}]},"readingTime":{"minutes":1.39,"words":417},"filePathRelative":"blogs/java/JavaIO/java-aio.md","localizedDate":"November 25, 2023","excerpt":"<h1> Java Asynchronous IO (AIO)</h1>\\n<h3> 使用AIO的文件读写</h3>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">AioDemo</span> <span class=\\"token punctuation\\">{</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> args<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">AioDemo</span> demo <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">AioDemo</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        demo<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">writeFile</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        demo<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">readFile</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token comment\\">// 使用 AsynchronousFileChannel 写入文件</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">writeFile</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">// 使用 Paths.get() 获取文件路径</span>\\n        <span class=\\"token class-name\\">Path</span> path <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">Paths</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"logs/itwanger/paicoding.txt\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">try</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token comment\\">// 用 AsynchronousFileChannel.open() 打开文件通道，指定写入和创建文件的选项。</span>\\n            <span class=\\"token class-name\\">AsynchronousFileChannel</span> fileChannel <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">AsynchronousFileChannel</span><span class=\\"token punctuation\\">.</span><span class=\\"token keyword\\">open</span><span class=\\"token punctuation\\">(</span>path<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">StandardOpenOption</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">WRITE</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">StandardOpenOption</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">CREATE</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n            <span class=\\"token comment\\">// 将要写入的字符串（\\"学编程就上技术派\\"）转换为 ByteBuffer。</span>\\n            <span class=\\"token class-name\\">ByteBuffer</span> buffer <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">StandardCharsets</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">UTF_8</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">encode</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"学编程就上技术派\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token comment\\">// 调用 fileChannel.write() 方法将 ByteBuffer 中的内容写入文件。这是一个异步操作，因此需要使用 Future 对象等待写入操作完成。</span>\\n            <span class=\\"token class-name\\">Future</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Integer</span><span class=\\"token punctuation\\">&gt;</span></span> result <span class=\\"token operator\\">=</span> fileChannel<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">write</span><span class=\\"token punctuation\\">(</span>buffer<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token comment\\">// 等待写操作完成</span>\\n            result<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n            <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"写入完成\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            fileChannel<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">close</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">IOException</span> <span class=\\"token operator\\">|</span> <span class=\\"token class-name\\">InterruptedException</span> <span class=\\"token operator\\">|</span> <span class=\\"token class-name\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>util<span class=\\"token punctuation\\">.</span>concurrent<span class=\\"token punctuation\\">.</span></span>ExecutionException</span> e<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            e<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">printStackTrace</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token comment\\">// 使用 AsynchronousFileChannel 读取文件</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">readFile</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">Path</span> path <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">Paths</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"logs/itwanger/paicoding.txt\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">try</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token comment\\">// 指定读取文件的选项。</span>\\n            <span class=\\"token class-name\\">AsynchronousFileChannel</span> fileChannel <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">AsynchronousFileChannel</span><span class=\\"token punctuation\\">.</span><span class=\\"token keyword\\">open</span><span class=\\"token punctuation\\">(</span>path<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">StandardOpenOption</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">READ</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token comment\\">// 创建一个 ByteBuffer，用于存储从文件中读取的数据。</span>\\n            <span class=\\"token class-name\\">ByteBuffer</span> buffer <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">ByteBuffer</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">allocate</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1024</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n            <span class=\\"token comment\\">// 调用 fileChannel.read() 方法从文件中异步读取数据。该方法接受一个 CompletionHandler 对象，用于处理异步操作完成后的回调。</span>\\n            fileChannel<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">read</span><span class=\\"token punctuation\\">(</span>buffer<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> buffer<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">CompletionHandler</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Integer</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">ByteBuffer</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token annotation punctuation\\">@Override</span>\\n                <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">completed</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Integer</span> result<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">ByteBuffer</span> attachment<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                    <span class=\\"token comment\\">// 在 CompletionHandler 的 completed() 方法中，翻转 ByteBuffer（attachment.flip()），然后使用 Charset.forName(\\"UTF-8\\").decode() 将其解码为字符串并打印。最后，清空缓冲区并关闭文件通道。</span>\\n                    attachment<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">flip</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                    <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"读取的内容: \\"</span> <span class=\\"token operator\\">+</span> <span class=\\"token class-name\\">StandardCharsets</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">UTF_8</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">decode</span><span class=\\"token punctuation\\">(</span>attachment<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                    attachment<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">clear</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                    <span class=\\"token keyword\\">try</span> <span class=\\"token punctuation\\">{</span>\\n                        fileChannel<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">close</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                    <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">IOException</span> e<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                        e<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">printStackTrace</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                    <span class=\\"token punctuation\\">}</span>\\n                <span class=\\"token punctuation\\">}</span>\\n\\n                <span class=\\"token annotation punctuation\\">@Override</span>\\n                <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">failed</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Throwable</span> exc<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">ByteBuffer</span> attachment<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                    <span class=\\"token comment\\">// 如果异步读取操作失败，CompletionHandler 的 failed() 方法将被调用，打印错误信息。</span>\\n                    <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"读取失败\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                    exc<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">printStackTrace</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n            <span class=\\"token comment\\">// 等待异步操作完成</span>\\n            <span class=\\"token class-name\\">Thread</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">sleep</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1000</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">IOException</span> <span class=\\"token operator\\">|</span> <span class=\\"token class-name\\">InterruptedException</span> e<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            e<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">printStackTrace</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
