import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r as n,o as c,c as s,a as t,b as e,e as o,d as i}from"./app-9e8a13db.js";const d={},l=i('<h1 id="cuda-runtime-error-and-restore" tabindex="-1"><a class="header-anchor" href="#cuda-runtime-error-and-restore" aria-hidden="true">#</a> CUDA Runtime Error and Restore</h1><p>There are two types of errors in CUDA Runtime: sticky and non-sticky ones.</p><h2 id="cuda-error-sticky-v-s-non-sticky" tabindex="-1"><a class="header-anchor" href="#cuda-error-sticky-v-s-non-sticky" aria-hidden="true">#</a> CUDA Error: Sticky V.S. Non-sticky</h2><table><thead><tr><th></th><th>Sticky</th><th>Non-Sticky</th></tr></thead><tbody><tr><td>Description</td><td>The behavior is undefined in the event of a CUDA error which corrupts the CUDA context.<br>This type of error is evident because it is &quot;sticky&quot;, meaning once it occurs, every single CUDA API call will return that error, until the context is destroyed.</td><td>Non-sticky errors are cleared automatically after they are returned by a cuda API call</td></tr><tr><td>Examples</td><td>Any &quot;crashed kernel&quot; type error (invalid access, unspecified launch failure, etc.)</td><td>An example of a non-sticky error might be an attempt to <code>cudaMalloc</code> more data than is available in device memory. Such an operation will return an out-of-memory error.</td></tr><tr><td>How to recover</td><td>The only method to restore proper device functionality after a non-recoverable (&quot;sticky&quot;) CUDA error is to <strong>terminate the host process</strong> that initiated.</td><td>The error will be cleared after being returned, and subsequent (valid) cuda API calls can complete successfully, without returning an error.</td></tr></tbody></table>',4),h={href:"https://stackoverflow.com/questions/56329377/reset-cuda-context-after-exception",target:"_blank",rel:"noopener noreferrer"},u={href:"https://stackoverflow.com/questions/31642520/states-of-memory-data-after-cuda-exceptions/31642573#31642573",target:"_blank",rel:"noopener noreferrer"};function f(m,y){const r=n("ExternalLinkIcon");return c(),s("div",null,[l,t("p",null,[e("References: "),t("a",h,[e("here"),o(r)]),e(" and "),t("a",u,[e("here"),o(r)]),e(".")])])}const _=a(d,[["render",f],["__file","kernel-restore.html.vue"]]);export{_ as default};
