const e=JSON.parse(`{"key":"v-147b189d","path":"/blogs/hpc/kernel-timeout.html","title":"How to stop a running CUDA kernel (when timeout)","lang":"en-US","frontmatter":{"category":"Computer Science","tag":["CUDA","GPGPU"],"description":"How to stop a running CUDA kernel (when timeout) When we start a CUDA kernel, it just runs like the Rud Bull racing car and can never be stopped before the kernel finishes. However, we need a timeout machenism to stop the kernel when the the kernel goes to an infinite loop or deadlock. However, the NVIDIA doesn't offer a way to stop the kernel in a decent way, which is especially required when I am doing mutation testing on CUDA kernel.","head":[["meta",{"property":"og:url","content":"https://blog.yujieliu.com/blogs/hpc/kernel-timeout.html"}],["meta",{"property":"og:site_name","content":"Yujie's blog"}],["meta",{"property":"og:title","content":"How to stop a running CUDA kernel (when timeout)"}],["meta",{"property":"og:description","content":"How to stop a running CUDA kernel (when timeout) When we start a CUDA kernel, it just runs like the Rud Bull racing car and can never be stopped before the kernel finishes. However, we need a timeout machenism to stop the kernel when the the kernel goes to an infinite loop or deadlock. However, the NVIDIA doesn't offer a way to stop the kernel in a decent way, which is especially required when I am doing mutation testing on CUDA kernel."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-11-25T09:26:15.000Z"}],["meta",{"property":"article:author","content":"Yujie Liu"}],["meta",{"property":"article:tag","content":"CUDA"}],["meta",{"property":"article:tag","content":"GPGPU"}],["meta",{"property":"article:modified_time","content":"2023-11-25T09:26:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to stop a running CUDA kernel (when timeout)\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-11-25T09:26:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Yujie Liu\\",\\"url\\":\\"https://blog.yujieliu.com/intro.html\\"}]}"]]},"headers":[{"level":2,"title":"Direction 1: Let the kernel kill itself when timeout","slug":"direction-1-let-the-kernel-kill-itself-when-timeout","link":"#direction-1-let-the-kernel-kill-itself-when-timeout","children":[{"level":3,"title":"App 1: Copy a interrupt flag to the running kernel in runtime when timeout.","slug":"app-1-copy-a-interrupt-flag-to-the-running-kernel-in-runtime-when-timeout","link":"#app-1-copy-a-interrupt-flag-to-the-running-kernel-in-runtime-when-timeout","children":[]},{"level":3,"title":"App 2: Set a timer for each thread and let the thread trap the kernel when reaching the timeout threshold","slug":"app-2-set-a-timer-for-each-thread-and-let-the-thread-trap-the-kernel-when-reaching-the-timeout-threshold","link":"#app-2-set-a-timer-for-each-thread-and-let-the-thread-trap-the-kernel-when-reaching-the-timeout-threshold","children":[]}]},{"level":2,"title":"Direction 2: Kill the host side process to let the GPU driver kill the corresponding device process","slug":"direction-2-kill-the-host-side-process-to-let-the-gpu-driver-kill-the-corresponding-device-process","link":"#direction-2-kill-the-host-side-process-to-let-the-gpu-driver-kill-the-corresponding-device-process","children":[]}],"git":{"createdTime":1700904375000,"updatedTime":1700904375000,"contributors":[{"name":"Yujie","email":"yujie.liu.public@gmail.com","commits":1}]},"readingTime":{"minutes":4.1,"words":1230},"filePathRelative":"blogs/hpc/kernel-timeout.md","localizedDate":"November 25, 2023","excerpt":"<h1> How to stop a running CUDA kernel (when timeout)</h1>\\n<p>When we start a CUDA kernel, it just runs like the Rud Bull racing car and can never be stopped before the kernel finishes.  However, we need a timeout machenism to stop the kernel when the the kernel goes to an infinite loop or deadlock. However, the NVIDIA doesn't offer a way to stop the kernel in a decent way, which is especially required when I am doing mutation testing on CUDA kernel.</p>","autoDesc":true}`);export{e as data};
