const e=JSON.parse(`{"key":"v-62f4c790","path":"/blogs/hpc/kernel-restore.html","title":"CUDA Runtime Error and Restore","lang":"en-US","frontmatter":{"category":"Computer Science","tag":["CUDA","GPGPU"],"description":"CUDA Runtime Error and Restore There are two types of errors in CUDA Runtime: sticky and non-sticky ones. CUDA Error: Sticky V.S. Non-sticky Sticky Non-Sticky Description The behavior is undefined in the event of a CUDA error which corrupts the CUDA context.This type of error is evident because it is \\"sticky\\", meaning once it occurs, every single CUDA API call will return that error, until the context is destroyed. Non-sticky errors are cleared automatically after they are returned by a cuda API call Examples Any \\"crashed kernel\\" type error (invalid access, unspecified launch failure, etc.) An example of a non-sticky error might be an attempt to cudaMalloc more data than is available in device memory. Such an operation will return an out-of-memory error. How to recover The only method to restore proper device functionality after a non-recoverable (\\"sticky\\") CUDA error is to terminate the host process that initiated. The error will be cleared after being returned, and subsequent (valid) cuda API calls can complete successfully, without returning an error.","head":[["meta",{"property":"og:url","content":"https://blog.yujieliu.com/blogs/hpc/kernel-restore.html"}],["meta",{"property":"og:site_name","content":"Yujie's blog"}],["meta",{"property":"og:title","content":"CUDA Runtime Error and Restore"}],["meta",{"property":"og:description","content":"CUDA Runtime Error and Restore There are two types of errors in CUDA Runtime: sticky and non-sticky ones. CUDA Error: Sticky V.S. Non-sticky Sticky Non-Sticky Description The behavior is undefined in the event of a CUDA error which corrupts the CUDA context.This type of error is evident because it is \\"sticky\\", meaning once it occurs, every single CUDA API call will return that error, until the context is destroyed. Non-sticky errors are cleared automatically after they are returned by a cuda API call Examples Any \\"crashed kernel\\" type error (invalid access, unspecified launch failure, etc.) An example of a non-sticky error might be an attempt to cudaMalloc more data than is available in device memory. Such an operation will return an out-of-memory error. How to recover The only method to restore proper device functionality after a non-recoverable (\\"sticky\\") CUDA error is to terminate the host process that initiated. The error will be cleared after being returned, and subsequent (valid) cuda API calls can complete successfully, without returning an error."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-11-25T09:26:15.000Z"}],["meta",{"property":"article:author","content":"Yujie Liu"}],["meta",{"property":"article:tag","content":"CUDA"}],["meta",{"property":"article:tag","content":"GPGPU"}],["meta",{"property":"article:modified_time","content":"2023-11-25T09:26:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CUDA Runtime Error and Restore\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-11-25T09:26:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Yujie Liu\\",\\"url\\":\\"https://blog.yujieliu.com/intro.html\\"}]}"]]},"headers":[{"level":2,"title":"CUDA Error: Sticky V.S. Non-sticky","slug":"cuda-error-sticky-v-s-non-sticky","link":"#cuda-error-sticky-v-s-non-sticky","children":[]}],"git":{"createdTime":1700904375000,"updatedTime":1700904375000,"contributors":[{"name":"Yujie","email":"yujie.liu.public@gmail.com","commits":1}]},"readingTime":{"minutes":0.69,"words":206},"filePathRelative":"blogs/hpc/kernel-restore.md","localizedDate":"November 25, 2023","excerpt":"<h1> CUDA Runtime Error and Restore</h1>\\n<p>There are two types of errors in CUDA Runtime: sticky and non-sticky ones.</p>\\n<h2> CUDA Error: Sticky V.S. Non-sticky</h2>\\n<table>\\n<thead>\\n<tr>\\n<th></th>\\n<th>Sticky</th>\\n<th>Non-Sticky</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Description</td>\\n<td>The behavior is undefined in the event of a CUDA error which corrupts the CUDA context.<br>This type of error is evident because it is \\"sticky\\", meaning once it occurs, every single CUDA API call will return that error, until the context is destroyed.</td>\\n<td>Non-sticky errors are cleared automatically after they are returned by a cuda API call</td>\\n</tr>\\n<tr>\\n<td>Examples</td>\\n<td>Any \\"crashed kernel\\" type error (invalid access, unspecified launch failure, etc.)</td>\\n<td>An example of a non-sticky error might be an attempt to <code>cudaMalloc</code> more data than is available in device memory. Such an operation will return an out-of-memory error.</td>\\n</tr>\\n<tr>\\n<td>How to recover</td>\\n<td>The only method to restore proper device functionality after a non-recoverable (\\"sticky\\") CUDA error is to <strong>terminate the host process</strong> that initiated.</td>\\n<td>The error will be cleared after being returned, and subsequent (valid) cuda API calls can complete successfully, without returning an error.</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}`);export{e as data};
