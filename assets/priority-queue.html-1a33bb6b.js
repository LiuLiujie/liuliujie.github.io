const e=JSON.parse(`{"key":"v-178bcb55","path":"/blogs/java/java-collection/priority-queue.html","title":"PriorityQueue 优先队列","lang":"en-US","frontmatter":{"category":["Computer Science","Programming Language"],"tag":["Java"],"description":"PriorityQueue 优先队列 PriorityQueue 是 Java 中的一个基于优先级堆的优先队列实现，它能够在 O(log n) 的时间复杂度内实现元素的插入和删除操作，并且能够自动维护队列中元素的优先级顺序。 通俗来说，PriorityQueue 就是一个队列，但是它不是先进先出的，而是按照元素优先级进行排序的。当你往 PriorityQueue 中插入一个元素时，它会自动根据元素的优先级将其插入到合适的位置。当你从 PriorityQueue 中删除一个元素时，它会自动将优先级最高的元素出队。","head":[["meta",{"property":"og:url","content":"https://blog.yujieliu.com/blogs/java/java-collection/priority-queue.html"}],["meta",{"property":"og:site_name","content":"Yujie's blog"}],["meta",{"property":"og:title","content":"PriorityQueue 优先队列"}],["meta",{"property":"og:description","content":"PriorityQueue 优先队列 PriorityQueue 是 Java 中的一个基于优先级堆的优先队列实现，它能够在 O(log n) 的时间复杂度内实现元素的插入和删除操作，并且能够自动维护队列中元素的优先级顺序。 通俗来说，PriorityQueue 就是一个队列，但是它不是先进先出的，而是按照元素优先级进行排序的。当你往 PriorityQueue 中插入一个元素时，它会自动根据元素的优先级将其插入到合适的位置。当你从 PriorityQueue 中删除一个元素时，它会自动将优先级最高的元素出队。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-11-26T09:28:45.000Z"}],["meta",{"property":"article:author","content":"Yujie Liu"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:modified_time","content":"2023-11-26T09:28:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"PriorityQueue 优先队列\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-11-26T09:28:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Yujie Liu\\",\\"url\\":\\"https://blog.yujieliu.com/intro.html\\"}]}"]]},"headers":[{"level":2,"title":"常用函数","slug":"常用函数","link":"#常用函数","children":[{"level":3,"title":"示例代码","slug":"示例代码","link":"#示例代码","children":[]}]},{"level":2,"title":"自定义排列顺序","slug":"自定义排列顺序","link":"#自定义排列顺序","children":[{"level":3,"title":"1. 使用Comparator提供的静态方法为降序排列","slug":"_1-使用comparator提供的静态方法为降序排列","link":"#_1-使用comparator提供的静态方法为降序排列","children":[]},{"level":3,"title":"2. 自定义Comparator规则","slug":"_2-自定义comparator规则","link":"#_2-自定义comparator规则","children":[]},{"level":3,"title":"3. 元素实现Comparable接口","slug":"_3-元素实现comparable接口","link":"#_3-元素实现comparable接口","children":[]}]},{"level":2,"title":"元素插入图解源码","slug":"元素插入图解源码","link":"#元素插入图解源码","children":[]},{"level":2,"title":"元素删除图解源码","slug":"元素删除图解源码","link":"#元素删除图解源码","children":[{"level":3,"title":"poll()","slug":"poll","link":"#poll","children":[]},{"level":3,"title":"remove()","slug":"remove","link":"#remove","children":[]}]}],"git":{"createdTime":1700921657000,"updatedTime":1700990925000,"contributors":[{"name":"Yujie","email":"yujie.liu.public@gmail.com","commits":3}]},"readingTime":{"minutes":5.62,"words":1686},"filePathRelative":"blogs/java/java-collection/priority-queue.md","localizedDate":"November 25, 2023","excerpt":"<h1> PriorityQueue 优先队列</h1>\\n<p>PriorityQueue 是 Java 中的一个基于<strong>优先级堆</strong>的优先队列实现，它能够在 <strong>O(log n) 的时间复杂度</strong>内实现元素的插入和删除操作，并且能够自动维护队列中元素的优先级顺序。</p>\\n<p>通俗来说，PriorityQueue 就是一个队列，但是它不是先进先出的，而是按照元素优先级进行排序的。当你往 PriorityQueue 中插入一个元素时，它会自动根据元素的优先级将其插入到合适的位置。当你从 PriorityQueue 中删除一个元素时，它会自动将优先级最高的元素出队。</p>","autoDesc":true}`);export{e as data};
