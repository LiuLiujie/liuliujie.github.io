const e=JSON.parse(`{"key":"v-1175d4f4","path":"/blogs/algorithm/binary-tree.html","title":"Binary Tree Questions 二叉树问题","lang":"en-US","frontmatter":{"category":"Computer Science","tag":["Algorithms","Leetcode","Binary Tree"],"description":"Binary Tree Questions 二叉树问题 This article is concluded from this article in Chinese. Cheatsheet: Steps to solve binary tree questions Can we get the answer by traversing the binary tree once? 是否能通过遍历一棵树来获取结果？ If not, can we define a recursive function that gets the answer to the original question from the answer to the subtree? If the solution involved the information of the subtree, it is recommended to use post-order position to handle data. 如果不能，是否能通过递归的方式获取子树的结果，再根据子树的结果计算最终结果。通常而言，由于需要子树的结果，常在后序位置处理节点数据。 No matter which model you are using, we need to think about what and when should we do for a single node? (Pre/In/Post-order) 无论使用哪一种思维模式，都要明白二叉树的每一个节点需要做什么，需要在什么时候（前中后序）做","head":[["meta",{"property":"og:url","content":"https://blog.yujieliu.com/blogs/algorithm/binary-tree.html"}],["meta",{"property":"og:site_name","content":"Yujie's blog"}],["meta",{"property":"og:title","content":"Binary Tree Questions 二叉树问题"}],["meta",{"property":"og:description","content":"Binary Tree Questions 二叉树问题 This article is concluded from this article in Chinese. Cheatsheet: Steps to solve binary tree questions Can we get the answer by traversing the binary tree once? 是否能通过遍历一棵树来获取结果？ If not, can we define a recursive function that gets the answer to the original question from the answer to the subtree? If the solution involved the information of the subtree, it is recommended to use post-order position to handle data. 如果不能，是否能通过递归的方式获取子树的结果，再根据子树的结果计算最终结果。通常而言，由于需要子树的结果，常在后序位置处理节点数据。 No matter which model you are using, we need to think about what and when should we do for a single node? (Pre/In/Post-order) 无论使用哪一种思维模式，都要明白二叉树的每一个节点需要做什么，需要在什么时候（前中后序）做"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-11-25T09:37:19.000Z"}],["meta",{"property":"article:author","content":"Yujie Liu"}],["meta",{"property":"article:tag","content":"Algorithms"}],["meta",{"property":"article:tag","content":"Leetcode"}],["meta",{"property":"article:tag","content":"Binary Tree"}],["meta",{"property":"article:modified_time","content":"2023-11-25T09:37:19.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Binary Tree Questions 二叉树问题\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-11-25T09:37:19.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Yujie Liu\\",\\"url\\":\\"https://blog.yujieliu.com/intro.html\\"}]}"]]},"headers":[{"level":2,"title":"Thinking models for binary tree questions","slug":"thinking-models-for-binary-tree-questions","link":"#thinking-models-for-binary-tree-questions","children":[]},{"level":2,"title":"Understanding of Pre/In/Post-order traversal","slug":"understanding-of-pre-in-post-order-traversal","link":"#understanding-of-pre-in-post-order-traversal","children":[{"level":3,"title":"Basic Concept","slug":"basic-concept","link":"#basic-concept","children":[]},{"level":3,"title":"Three different position for handling data","slug":"three-different-position-for-handling-data","link":"#three-different-position-for-handling-data","children":[]},{"level":3,"title":"Why post-order traversal is special?","slug":"why-post-order-traversal-is-special","link":"#why-post-order-traversal-is-special","children":[]}]},{"level":2,"title":"Examples of two thinking models","slug":"examples-of-two-thinking-models","link":"#examples-of-two-thinking-models","children":[{"level":3,"title":"T104. Maximum Depth of Binary Tree","slug":"t104-maximum-depth-of-binary-tree","link":"#t104-maximum-depth-of-binary-tree","children":[]}]},{"level":2,"title":"Understanding of Dynamic Programming, Backtracking and DFS algorithms under the framework of the binary tree","slug":"understanding-of-dynamic-programming-backtracking-and-dfs-algorithms-under-the-framework-of-the-binary-tree","link":"#understanding-of-dynamic-programming-backtracking-and-dfs-algorithms-under-the-framework-of-the-binary-tree","children":[{"level":3,"title":"Dynamic Programming","slug":"dynamic-programming","link":"#dynamic-programming","children":[]},{"level":3,"title":"Backtracking","slug":"backtracking","link":"#backtracking","children":[]},{"level":3,"title":"DFS","slug":"dfs","link":"#dfs","children":[]}]},{"level":2,"title":"Level-order traversal (BFS) framework","slug":"level-order-traversal-bfs-framework","link":"#level-order-traversal-bfs-framework","children":[]}],"git":{"createdTime":1700904375000,"updatedTime":1700905039000,"contributors":[{"name":"Yujie","email":"yujie.liu.public@gmail.com","commits":2}]},"readingTime":{"minutes":6.05,"words":1814},"filePathRelative":"blogs/algorithm/binary-tree.md","localizedDate":"November 25, 2023","excerpt":"<h1> Binary Tree Questions 二叉树问题</h1>\\n<p>This article is concluded from this <a href=\\"https://labuladong.github.io/algo/di-ling-zh-bfe1b/dong-ge-da-334dd/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">article</a> in Chinese.</p>\\n<p><strong>Cheatsheet: Steps to solve binary tree questions</strong></p>\\n<ol>\\n<li>Can we get the answer by traversing the binary tree once? 是否能通过遍历一棵树来获取结果？</li>\\n<li>If not, can we define a recursive function that gets the answer to the original question from the answer to the subtree? If the solution involved the information of the subtree, it is recommended to use post-order position to handle data. 如果不能，是否能通过递归的方式获取子树的结果，再根据子树的结果计算最终结果。通常而言，由于需要子树的结果，常在后序位置处理节点数据。</li>\\n<li>No matter which model you are using, we need to think about <strong>what</strong> and <strong>when</strong> should we do for a single node? (Pre/In/Post-order)  无论使用哪一种思维模式，都要明白二叉树的每一个节点需要做什么，需要在什么时候（前中后序）做</li>\\n</ol>","autoDesc":true}`);export{e as data};
