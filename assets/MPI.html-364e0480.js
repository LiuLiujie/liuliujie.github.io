import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,a as n,b as s,e,d as t}from"./app-9e8a13db.js";const l={},u=n("h1",{id:"mpi-tutorial",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#mpi-tutorial","aria-hidden":"true"},"#"),s(" MPI Tutorial")],-1),r={href:"https://mpitutorial.com",target:"_blank",rel:"noopener noreferrer"},d=n("p",null,"MPI: Message Passing Interface",-1),k=n("ul",null,[n("li",null,"程序通过在进程间传递消息（消息可以理解成带有一些信息和数据的一个数据结构）来完成某些任务"),n("li",null,"E.g.: 主进程（manager process）可以通过对从进程（worker process）发送一个描述工作的消息来把这个工作分配给它。另一个例子就是一个并发的排序程序可以在当前进程中对当前进程可见的（我们称作本地的，locally）数据进行排序，然后把排好序的数据发送的邻居进程上面来进行合并的操作。")],-1),m=n("p",null,"MPI 只是定义了一种数据传输接口，因此有多种实现方式，比如OpenMPI和MPICH，本文使用MPICH进行演示。",-1),v={id:"mpi-helloworld",tabindex:"-1"},b=n("a",{class:"header-anchor",href:"#mpi-helloworld","aria-hidden":"true"},"#",-1),_={href:"https://mpitutorial.com/tutorials/mpi-hello-world/zh_cn/",target:"_blank",rel:"noopener noreferrer"},w=t(`<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 1.引入MPI头文件</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mpi.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 2.初始化 MPI 环境</span>
    <span class="token function">MPI_Init</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 3.通过调用以下方法来得到所有可以工作的进程数量</span>
    <span class="token keyword">int</span> world_size<span class="token punctuation">;</span>
    <span class="token function">MPI_Comm_size</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>world_size<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 4.得到当前进程的秩rank</span>
    <span class="token keyword">int</span> world_rank<span class="token punctuation">;</span>
    <span class="token function">MPI_Comm_rank</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>world_rank<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 5.得到当前进程的名字</span>
    <span class="token keyword">char</span> processor_name<span class="token punctuation">[</span>MPI_MAX_PROCESSOR_NAME<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> name_len<span class="token punctuation">;</span>
    <span class="token function">MPI_Get_processor_name</span><span class="token punctuation">(</span>processor_name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>name_len<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 打印一条带有当前进程名字，秩以及</span>
    <span class="token comment">// 整个 communicator 的大小的 hello world 消息。</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello world from processor %s, rank %d out of %d processors\\n&quot;</span><span class="token punctuation">,</span>
           processor_name<span class="token punctuation">,</span> world_rank<span class="token punctuation">,</span> world_size<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 6.释放 MPI 的一些资源</span>
    <span class="token function">MPI_Finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p>引入MPI头文件</p></li><li><p>在 <code>MPI_Init</code> 的过程中，所有 MPI 的全局变量或者内部变量都会被创建。举例来说，一个通讯器 communicator 会根据所有可用的进程被创建出来（进程是我们通过 mpi 运行时的参数指定的），然后每个进程会被分配独一无二的秩 rank。当前来说，<code>MPI_Init</code> 接受的两个参数是没有用处的，不过参数的位置保留着，可能以后的实现会需要用到。</p></li><li><p><code>MPI_Comm_size</code> 会返回 communicator 的大小，也就是 communicator 中可用的进程数量。在我们的例子中，<code>MPI_COMM_WORLD</code>（这个 communicator 是 MPI 帮我们生成的）这个变量包含了当前 MPI 任务中所有的进程，因此在我们的代码里的这个调用会返回所有的可用的进程数目。</p></li><li><p><code>MPI_Comm_rank</code> 这个函数会返回 communicator 中当前进程的 rank 秩。 communicator 中每个进程会以此得到一个从0开始递增的数字作为 rank 值。rank 值主要是用来指定发送或者接受信息时对应的进程。</p></li><li><p><code>MPI_Get_processor_name</code> 会得到当前进程实际跑的时候所在的处理器名字，实际中比较少用</p></li><li><p><code>MPI_Finalize</code> 是用来清理 MPI 环境的。这个调用之后就没有 MPI 函数可以被调用了。</p></li></ol><p>运行结果</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ubuntu@oracle3:~/mpitutorial/tutorials$ python3 run.py mpi_hello_world
mpirun -n 4  ./mpi-hello-world/code/mpi_hello_world
Hello world from processor oracle3, rank 3 out of 4 processors
Hello world from processor oracle3, rank 1 out of 4 processors
Hello world from processor oracle3, rank 0 out of 4 processors
Hello world from processor oracle3, rank 2 out of 4 processors
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),g={id:"mpi-send-an-receive",tabindex:"-1"},M=n("a",{class:"header-anchor",href:"#mpi-send-an-receive","aria-hidden":"true"},"#",-1),h={href:"https://mpitutorial.com/tutorials/mpi-send-and-receive/zh_cn/",target:"_blank",rel:"noopener noreferrer"},f=t(`<p>MPI 的发送和接收方法是按以下方式进行的：开始的时候，<em>A</em> 进程决定要发送一些消息给 <em>B</em> 进程。A进程就会把需要发送给B进程的所有数据打包好，放到一个缓存里面。因为所有数据会被打包到一个大的信息里面，因此缓存常常会被比作<em>信封</em>（就像我们把好多信纸打包到一个信封里面然后再寄去邮局）。数据打包进缓存之后，通信设备（通常是网络）就需要负责把信息传递到正确的地方。这个正确的地方也就是根据特定秩确定的那个进程。</p><p>尽管数据已经被送达到 B 了，但是进程 B 依然需要确认它想要接收 A 的数据。一旦它确定了这点，数据就被传输成功了。进程 A 会接收到数据传递成功的信息，然后去干其他事情。</p><p>有时候 A 需要传递很多不同的消息给 B。为了让 B 能比较方便地区分不同的消息，MPI 运行发送者和接受者额外地指定一些信息 ID (正式名称是<em>标签</em>, <em>tags</em>)。当 B 只要求接收某种特定标签的信息的时候，其他的不是这个标签的信息会先被缓存起来，等到 B 需要的时候才会给 B。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">MPI_Send</span><span class="token punctuation">(</span>
    <span class="token keyword">void</span><span class="token operator">*</span> data<span class="token punctuation">,</span><span class="token comment">//data cache</span>
    <span class="token keyword">int</span> count<span class="token punctuation">,</span><span class="token comment">//num of data</span>
    MPI_Datatype datatype<span class="token punctuation">,</span><span class="token comment">//type of data</span>
    <span class="token keyword">int</span> destination<span class="token punctuation">,</span> <span class="token comment">//rank of destination</span>
    <span class="token keyword">int</span> tag<span class="token punctuation">,</span> <span class="token comment">// distinguish different types of msg</span>
    MPI_Comm communicator<span class="token punctuation">)</span> <span class="token comment">// use which communicator</span>
    
<span class="token function">MPI_Recv</span><span class="token punctuation">(</span>
    <span class="token keyword">void</span><span class="token operator">*</span> data<span class="token punctuation">,</span>
    <span class="token keyword">int</span> count<span class="token punctuation">,</span>
    MPI_Datatype datatype<span class="token punctuation">,</span>
    <span class="token keyword">int</span> source<span class="token punctuation">,</span>
    <span class="token keyword">int</span> tag<span class="token punctuation">,</span>
    MPI_Comm communicator<span class="token punctuation">,</span>
    MPI_Status<span class="token operator">*</span> status<span class="token punctuation">)</span><span class="token comment">// Status of received information</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="data-type" tabindex="-1"><a class="header-anchor" href="#data-type" aria-hidden="true">#</a> Data Type</h3><table><thead><tr><th>MPI datatype</th><th>C equivalent</th></tr></thead><tbody><tr><td>MPI_SHORT</td><td>short int</td></tr><tr><td>MPI_INT</td><td>int</td></tr><tr><td>MPI_LONG</td><td>long int</td></tr><tr><td>MPI_LONG_LONG</td><td>long long int</td></tr><tr><td>MPI_UNSIGNED_CHAR</td><td>unsigned char</td></tr><tr><td>MPI_UNSIGNED_SHORT</td><td>unsigned short int</td></tr><tr><td>MPI_UNSIGNED</td><td>unsigned int</td></tr><tr><td>MPI_UNSIGNED_LONG</td><td>unsigned long int</td></tr><tr><td>MPI_UNSIGNED_LONG_LONG</td><td>unsigned long long int</td></tr><tr><td>MPI_FLOAT</td><td>float</td></tr><tr><td>MPI_DOUBLE</td><td>double</td></tr><tr><td>MPI_LONG_DOUBLE</td><td>long double</td></tr><tr><td>MPI_BYTE</td><td>char</td></tr></tbody></table><h3 id="send-receive-program" tabindex="-1"><a class="header-anchor" href="#send-receive-program" aria-hidden="true">#</a> Send / Receive Program</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/*senc_recv.c*/</span>

<span class="token comment">// 得到当前进程的 rank 以及整个 communicator 的大小</span>
<span class="token keyword">int</span> world_rank<span class="token punctuation">;</span>
<span class="token function">MPI_Comm_rank</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>world_rank<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> world_size<span class="token punctuation">;</span>
<span class="token function">MPI_Comm_size</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>world_size<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> number<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>world_rank <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  	<span class="token comment">//Rank 0: Send number -1 to rank 1 with tag 0</span>
    number <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  	<span class="token comment">//params: data, count, type, rank, tag, communicator</span>
    <span class="token function">MPI_Send</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>number<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> MPI_INT<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> MPI_COMM_WORLD<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>world_rank <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  	<span class="token comment">//Rank 1: Receive an integer from rank 0 with tag 0</span>
    <span class="token function">MPI_Recv</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>number<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> MPI_INT<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> MPI_COMM_WORLD<span class="token punctuation">,</span> MPI_STATUS_IGNORE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Process 1 received number %d from process 0\\n&quot;</span><span class="token punctuation">,</span>
           number<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>MPI_Comm_rank</code> 和 <code>MPI_Comm_size</code> 一开始是用来得到整个 communicator 空间的大小（也就是所有进程的数量）以及当前进程的秩。然后如果当前进程是 0 进程，那么我们就初始化一个数字 -1 然后把它发送给 1 进程。然后你可以看到 <code>else if</code> 条件语句里的话题，进程 1 会调用 <code>MPI_Recv</code> 去接受这个数字。然后会将接收到的数字打印出来。由于我们明确地发送接收了一个整数，因此 <code>MPI_INT</code> 数据类型被使用了。每个进程还使用了 0 作为消息标签来指定消息。由于我们这里只有一种类型的信息被传递了，因此进程也可以使用预先定义好的常量 <code>MPI_ANY_TAG</code> 来作为标签数字。</p><h3 id="ping-pong-program" tabindex="-1"><a class="header-anchor" href="#ping-pong-program" aria-hidden="true">#</a> Ping-Pong Program</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> ping_pong_count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> partner_rank <span class="token operator">=</span> <span class="token punctuation">(</span>world_rank <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// Rank 0 will get 1, rank 1 will get 0</span>

<span class="token keyword">while</span> <span class="token punctuation">(</span>ping_pong_count <span class="token operator">&lt;</span> PING_PONG_LIMIT<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>world_rank <span class="token operator">==</span> ping_pong_count <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      	<span class="token comment">//Rank 0: Sent the count to another rank with tag 0</span>
        <span class="token comment">// Increment the ping pong count before you send it</span>
        ping_pong_count<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token function">MPI_Send</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ping_pong_count<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> MPI_INT<span class="token punctuation">,</span> partner_rank<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> MPI_COMM_WORLD<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d sent and incremented ping_pong_count %d to %d\\n&quot;</span><span class="token punctuation">,</span>
               world_rank<span class="token punctuation">,</span> ping_pong_count<span class="token punctuation">,</span> partner_rank<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      	<span class="token comment">//Rank 1: Receive an integer from another rank with tag 0</span>
        <span class="token function">MPI_Recv</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ping_pong_count<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> MPI_INT<span class="token punctuation">,</span> partner_rank<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> MPI_COMM_WORLD<span class="token punctuation">,</span>
                 MPI_STATUS_IGNORE<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d received ping_pong_count %d from %d\\n&quot;</span><span class="token punctuation">,</span>
               world_rank<span class="token punctuation">,</span> ping_pong_count<span class="token punctuation">,</span> partner_rank<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The sequence of results may differ. The last <code>ping_pong_count</code> is equal to <code>PING_PONG_LIMIT</code>.</p><h3 id="ring-program" tabindex="-1"><a class="header-anchor" href="#ring-program" aria-hidden="true">#</a> Ring program</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> token<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>world_rank <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  	<span class="token comment">//Other ranks will be blocked here to receive the data</span>
    <span class="token function">MPI_Recv</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>token<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> MPI_INT<span class="token punctuation">,</span> world_rank <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> MPI_COMM_WORLD<span class="token punctuation">,</span> MPI_STATUS_IGNORE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Process %d received token %d from process %d\\n&quot;</span><span class="token punctuation">,</span>
           world_rank<span class="token punctuation">,</span> token<span class="token punctuation">,</span> world_rank <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// Set the token&#39;s value if you are process 0 (rank 0)</span>
    token <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//Send the token to the next rank with tag 0 in a ring (modular)</span>
<span class="token function">MPI_Send</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>token<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> MPI_INT<span class="token punctuation">,</span> <span class="token punctuation">(</span>world_rank <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> world_size<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> MPI_COMM_WORLD<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Now process 0 can receive from the last process after a ring</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>world_rank <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">MPI_Recv</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>token<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> MPI_INT<span class="token punctuation">,</span> world_size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> MPI_COMM_WORLD<span class="token punctuation">,</span> MPI_STATUS_IGNORE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Process %d received token %d from process %d\\n&quot;</span><span class="token punctuation">,</span>
           world_rank<span class="token punctuation">,</span> token<span class="token punctuation">,</span> world_size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个环程序在进程0上面初始化了一个值-1，赋值给 token。然后这个值会依次传递给每个进程。程序会在进程0从最后一个进程接收到值之后结束。如你所见，我们的逻辑避免了死锁的发生。具体来说，进程0保证了在想要接受数据之前发送了 token。所有其他的进程只是简单的调用 <code>MPI_Recv</code> (从他们的邻居进程接收数据)，然后调用 <code>MPI_Send</code> (发送数据到他们的邻居进程)把数据从环上传递下去。<code>MPI_Send</code> 和 <code>MPI_Recv</code> 会阻塞直到数据传递完成。因为这个特性，打印出来的数据是跟数据传递的次序一样的。用5个进程的话，输出应该是这样的：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ubuntu@oracle3:~/mpitutorial/tutorials$ python3 ./run.py ring
mpirun -n 5  ./mpi-send-and-receive/code/ring
Process 1 received token -1 from process 0
Process 2 received token -1 from process 1
Process 3 received token -1 from process 2
Process 4 received token -1 from process 3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="dynamic-receiving-with-mpi-probe-and-mpi-status" tabindex="-1"><a class="header-anchor" href="#dynamic-receiving-with-mpi-probe-and-mpi-status" aria-hidden="true">#</a> Dynamic Receiving with MPI Probe (and MPI Status)</h2><p>上一节中讨论了接受者事先知道消息的长度时的消息发送与接收，当接收者不知道消息长度时，MPI本身也可以通过额外的几个函数调用来支持这类<em>动态消息</em>的发送与接收。</p><h3 id="mpi-status-struct" tabindex="-1"><a class="header-anchor" href="#mpi-status-struct" aria-hidden="true">#</a> MPI_Status Struct</h3><p><code>MPI_Recv</code> 将 <code>MPI_Status</code> 结构体的地址作为参数（可以使用 <code>MPI_STATUS_IGNORE</code> 忽略）。 如果我们将 <code>MPI_Status</code> 结构体传递给 <code>MPI_Recv</code> 函数，则操作完成后将在该结构体中填充有关接收操作的其他信息。 三个主要的信息包括：</p><ol><li><strong>发送端秩</strong>. 发送端的秩存储在结构体的 <code>MPI_SOURCE</code> 元素中。也就是说，如果我们声明一个 <code>MPI_Status stat</code> 变量，则可以通过 <code>stat.MPI_SOURCE</code>访问秩。</li><li><strong>消息的标签</strong>. 消息的标签可以通过结构体的 <code>MPI_TAG</code> 元素访问（类似于 <code>MPI_SOURCE</code>）。</li><li><strong>消息的长度</strong>. 消息的长度在结构体中没有预定义的元素。相反，我们必须使用 <code>MPI_Get_count</code> 找出消息的长度。</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">MPI_Get_count</span><span class="token punctuation">(</span>
    MPI_Status<span class="token operator">*</span> status<span class="token punctuation">,</span>
    MPI_Datatype datatype<span class="token punctuation">,</span>
    <span class="token keyword">int</span><span class="token operator">*</span> count<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>MPI_Get_count</code> 函数中，使用者需要传递 <code>MPI_Status</code> 结构体，消息的 <code>datatype</code>（数据类型），并返回 <code>count</code>。 变量 <code>count</code> 是已接收的 <code>datatype</code> 元素的数目。</p><p>为什么需要这些信息？ 事实证明，<code>MPI_Recv</code> 可以将 <code>MPI_ANY_SOURCE</code> 用作发送端的秩，将 <code>MPI_ANY_TAG</code> 用作消息的标签。 在这种情况下，<code>MPI_Status</code> 结构体是找出消息的实际发送端和标签的唯一方法。 此外，并不能保证 <code>MPI_Recv</code>能够接收函数调用参数的全部元素。 相反，它只接收已发送给它的元素数量（如果发送的元素多于所需的接收数量，则返回错误。） <code>MPI_Get_count</code> 函数用于确定实际的接收量。</p><p>以下示例将随机数量的数字发送给接收端，然后接收端找出发送了多少个数字。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token keyword">int</span> MAX_NUMBERS <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> numbers<span class="token punctuation">[</span>MAX_NUMBERS<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> number_amount<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>world_rank <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Pick a random amount of integers to send to process one</span>
    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    number_amount <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>RAND_MAX<span class="token punctuation">)</span> <span class="token operator">*</span> MAX_NUMBERS<span class="token punctuation">;</span>

    <span class="token comment">// Send the amount of integers to process one</span>
    <span class="token function">MPI_Send</span><span class="token punctuation">(</span>numbers<span class="token punctuation">,</span> number_amount<span class="token punctuation">,</span> MPI_INT<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> MPI_COMM_WORLD<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;0 sent %d numbers to 1\\n&quot;</span><span class="token punctuation">,</span> number_amount<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>world_rank <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    MPI_Status status<span class="token punctuation">;</span>
    <span class="token comment">// Receive at most MAX_NUMBERS from process zero</span>
    <span class="token function">MPI_Recv</span><span class="token punctuation">(</span>numbers<span class="token punctuation">,</span> MAX_NUMBERS<span class="token punctuation">,</span> MPI_INT<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> MPI_COMM_WORLD<span class="token punctuation">,</span>
             <span class="token operator">&amp;</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// After receiving the message, check the status to determine</span>
    <span class="token comment">// how many numbers were actually received</span>
    <span class="token function">MPI_Get_count</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>status<span class="token punctuation">,</span> MPI_INT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>number_amount<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Print off the amount of numbers, and also print additional</span>
    <span class="token comment">// information in the status object</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;1 received %d numbers from 0. Message source = %d, &quot;</span>
           <span class="token string">&quot;tag = %d\\n&quot;</span><span class="token punctuation">,</span>
           number_amount<span class="token punctuation">,</span> status<span class="token punctuation">.</span>MPI_SOURCE<span class="token punctuation">,</span> status<span class="token punctuation">.</span>MPI_TAG<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进程 0 将最多 <code>MAX_NUMBERS</code> 个整数以随机数量发送到进程 1。 进程 1 然后调用 <code>MPI_Recv</code> 以获取总计 <code>MAX_NUMBERS</code> 个整数。 尽管进程 1 以 <code>MAX_NUMBERS</code> 作为 <code>MPI_Recv</code> 函数参数，但进程 1 将最多接收到此数量的数字。 在代码中，进程 1 使用 <code>MPI_INT</code> 作为数据类型的参数，调用 <code>MPI_Get_count</code>，以找出实际接收了多少个整数。 除了打印出接收到的消息的大小外，进程 1 还通过访问 status 结构体的 <code>MPI_SOURCE</code> 和 <code>MPI_TAG</code> 元素来打印消息的来源和标签。</p><p>为了澄清起见，<code>MPI_Get_count</code> 的返回值是相对于传递的数据类型而言的。 如果用户使用 <code>MPI_CHAR</code> 作为数据类型，则返回的数量将是原来的四倍（假设整数是四个字节，而 char 是一个字节）。</p><h3 id="use-mpi-probe-to-query-the-size-of-incoming-data" tabindex="-1"><a class="header-anchor" href="#use-mpi-probe-to-query-the-size-of-incoming-data" aria-hidden="true">#</a> Use <code>MPI_Probe</code> to query the size of incoming data</h3><p>使用 <code>MPI_Probe</code>在实际接收消息之前查询消息大小。 <code>MPI_Probe</code> 除了不接收消息外，它们执行与<code>MPI_Recv</code>相同的功能。当消息可用时，它将填充 status 结构体。 然后，用户可以使用 <code>MPI_Recv</code> 接收实际的消息。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">MPI_Probe</span><span class="token punctuation">(</span>
    <span class="token keyword">int</span> source<span class="token punctuation">,</span>
    <span class="token keyword">int</span> tag<span class="token punctuation">,</span>
    MPI_Comm comm<span class="token punctuation">,</span>
    MPI_Status<span class="token operator">*</span> status<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> number_amount<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>world_rank <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token keyword">int</span> MAX_NUMBERS <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> numbers<span class="token punctuation">[</span>MAX_NUMBERS<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// Pick a random amount of integers to send to process one</span>
    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    number_amount <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>RAND_MAX<span class="token punctuation">)</span> <span class="token operator">*</span> MAX_NUMBERS<span class="token punctuation">;</span>

    <span class="token comment">// Send the random amount of integers to process one</span>
    <span class="token function">MPI_Send</span><span class="token punctuation">(</span>numbers<span class="token punctuation">,</span> number_amount<span class="token punctuation">,</span> MPI_INT<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> MPI_COMM_WORLD<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;0 sent %d numbers to 1\\n&quot;</span><span class="token punctuation">,</span> number_amount<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>world_rank <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    MPI_Status status<span class="token punctuation">;</span>
    <span class="token comment">// Probe for an incoming message from process zero</span>
  	<span class="token comment">// </span>
    <span class="token function">MPI_Probe</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// When probe returns, the status object has the size and other</span>
    <span class="token comment">// attributes of the incoming message. Get the message size</span>
    <span class="token function">MPI_Get_count</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>status<span class="token punctuation">,</span> MPI_INT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>number_amount<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Allocate a buffer to hold the incoming numbers</span>
    <span class="token keyword">int</span><span class="token operator">*</span> number_buf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> number_amount<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Now receive the message with the allocated buffer</span>
    <span class="token function">MPI_Recv</span><span class="token punctuation">(</span>number_buf<span class="token punctuation">,</span> number_amount<span class="token punctuation">,</span> MPI_INT<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>
             MPI_COMM_WORLD<span class="token punctuation">,</span> MPI_STATUS_IGNORE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;1 dynamically received %d numbers from 0.\\n&quot;</span><span class="token punctuation">,</span>
           number_amount<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>number_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进程 0 选择随机数量的数字发送给进程 1。 进程 1 调用 <code>MPI_Probe</code>，以找出进程 0 试图发送多少个元素（利用 <code>MPI_Get_count</code>）。 然后，进程 1 分配适当大小的缓冲区并接收数字。</p><h2 id="point-to-point-communication-application-random-walk" tabindex="-1"><a class="header-anchor" href="#point-to-point-communication-application-random-walk" aria-hidden="true">#</a> Point-to-Point Communication Application - Random Walk</h2><p>随机游走的基本问题定义如下： 给定 <em>Min</em>，<em>Max</em> 和随机游走器 <em>W</em>，让游走器 <em>W</em> 向右以任意长度的 <em>S</em> 随机移动。 如果该过程越过边界，它就会绕回。 <em>W</em> 一次只能左右移动一个单位。</p><p><img src="https://pics.yujieliu.com/blog/2023/11/63ba7c46f02ba219ce87175a8131449f.png" alt="随机游走图"></p><h3 id="随机游走问题的并行化" tabindex="-1"><a class="header-anchor" href="#随机游走问题的并行化" aria-hidden="true">#</a> 随机游走问题的并行化</h3><p>在许多并行程序的应用中，首要任务是在各个进程之间划分域。 随机行走问题的一维域大小为 <em>Max - Min + 1</em>（因为游走器包含 <em>Max</em> 和 <em>Min</em>）。 假设游走器只能采取整数大小的步长，我们可以轻松地将域在每个进程中划分为大小近乎相等的块。 例如，如果 <em>Min</em> 为 0，<em>Max</em> 为 20，并且我们有四个进程，则将像这样拆分域。</p><p><img src="https://pics.yujieliu.com/blog/2023/11/75ac190f4a01265564d272a0736e1994.png" alt="Domain decomposition example"></p><p>前三个进程拥有域的五个单元，而最后一个进程则拥有最后五个单元并且再加上一个剩余的单元。 一旦对域进行了分区，应用程序将初始化游走器。 如前所述，游走器将以步长 <em>S</em> 进行总步数随机的游走。 例如，如果游走器在进程 0（使用先前的分解域）上进行了移动总数为 6 的游走，则游走器的执行将如下所示：</p><ol><li>游走器的步行长度开始增加。但是，当它的值达到 4 时，它已到达进程 0 的边界。因此，进程 0 必须与进程 1 交流游走器的信息。</li><li>进程 1 接收游走器，并继续移动，直到达到移动总数 6。然后，游走器可以继续进行新的随机移动。</li></ol><p><img src="https://pics.yujieliu.com/blog/2023/11/876c8496f69729953a1eda3e57211792.png" alt="Random walk, step one"></p><p>在此示例中，<em>W</em> 仅需从进程 0 到进程 1 进行一次通信。 但是，如果 <em>W</em> 必须移动更长的距离，则可能需要沿其通过域的路径将其传递给更多的进程。</p><h3 id="使用-mpi-send-和-mpi-recv-组织代码" tabindex="-1"><a class="header-anchor" href="#使用-mpi-send-和-mpi-recv-组织代码" aria-hidden="true">#</a> 使用 <code>MPI_Send</code> 和 <code>MPI_Recv</code> 组织代码</h3><p>可以使用 <code>MPI_Send</code> 和 <code>MPI_Recv</code> 对组织代码。 在开始查看代码之前，让我们建立程序的一些初步特征和功能：</p><ul><li>明确每个进程在域中的部分。</li><li>每个进程初始化 <em>N</em> 个 walker，所有这些 walker 都从其局部域的第一个值开始。</li><li>每个 walker 都有两个相关的整数值：当前位置和剩余步数。</li><li>Walkers 开始遍历该域，并传递到其他进程，直到完成所有移动。</li><li>当所有 walker 完成时，该进程终止。</li></ul><p>让我们从编写用于分解域的代码开始。 该函数将考虑域的总大小，并为 MPI 进程找到合适的子域。 它还会将域的其余部分交给最终的进程。 为了简单起见，我会调用 <code>MPI_Abort</code> 处理发现的任何错误。 名为 <code>decompose_domain</code> 的函数如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">decompose_domain</span><span class="token punctuation">(</span><span class="token keyword">int</span> domain_size<span class="token punctuation">,</span> <span class="token keyword">int</span> world_rank<span class="token punctuation">,</span>
                      <span class="token keyword">int</span> world_size<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> subdomain_start<span class="token punctuation">,</span>
                      <span class="token keyword">int</span><span class="token operator">*</span> subdomain_size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>world_size <span class="token operator">&gt;</span> domain_size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Don&#39;t worry about this special case. Assume the domain</span>
        <span class="token comment">// size is greater than the world size.</span>
        <span class="token function">MPI_Abort</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  	<span class="token comment">//每个进程的开始的但愿：总大小 / 每个域的大小 * 进程id</span>
    <span class="token operator">*</span>subdomain_start <span class="token operator">=</span> domain_size <span class="token operator">/</span> world_size <span class="token operator">*</span> world_rank<span class="token punctuation">;</span>
  	<span class="token comment">//子域大小：总数量 / 每个进程的大小 * 进程id</span>
    <span class="token operator">*</span>subdomain_size <span class="token operator">=</span> domain_size <span class="token operator">/</span> world_size<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>world_rank <span class="token operator">==</span> world_size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Give remainder to last process</span>
      	<span class="token comment">//最后一个进程处理多出来无法整除的</span>
        <span class="token operator">*</span>subdomain_size <span class="token operator">+=</span> domain_size <span class="token operator">%</span> world_size<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们需要创建一个初始化 walkers 的函数。 我们首先定义一个如下所示的 walker 结构：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> location<span class="token punctuation">;</span>
    <span class="token keyword">int</span> num_steps_left_in_walk<span class="token punctuation">;</span>
<span class="token punctuation">}</span> Walker<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们的初始化函数为 <code>initialize_walkers</code>，它采用子域边界，并将 walker 添加到 <code>incoming_walkers</code> 中</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">initialize_walkers</span><span class="token punctuation">(</span><span class="token keyword">int</span> num_walkers_per_proc<span class="token punctuation">,</span> <span class="token keyword">int</span> max_walk_size<span class="token punctuation">,</span>
                        <span class="token keyword">int</span> subdomain_start<span class="token punctuation">,</span> <span class="token keyword">int</span> subdomain_size<span class="token punctuation">,</span>
                        vector<span class="token operator">&lt;</span>Walker<span class="token operator">&gt;</span><span class="token operator">*</span> incoming_walkers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Walker walker<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num_walkers_per_proc<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Initialize walkers in the middle of the subdomain</span>
        walker<span class="token punctuation">.</span>location <span class="token operator">=</span> subdomain_start<span class="token punctuation">;</span>
      	<span class="token comment">//随机一个数让walker往下走</span>
        walker<span class="token punctuation">.</span>num_steps_left_in_walk <span class="token operator">=</span>
            <span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>RAND_MAX<span class="token punctuation">)</span> <span class="token operator">*</span> max_walk_size<span class="token punctuation">;</span>
        incoming_walkers<span class="token operator">-&gt;</span><span class="token function">push_back</span><span class="token punctuation">(</span>walker<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>初始化之后，就该使 walkers 前进了。 让我们从一个移动功能开始。 此功能负责使 walkers 前进，直到完成移动为止。 如果超出局部域范围，则将其添加到 <code>outgoing_walkers</code> <code>vector</code> 中。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">walk</span><span class="token punctuation">(</span>Walker<span class="token operator">*</span> walker<span class="token punctuation">,</span> <span class="token keyword">int</span> subdomain_start<span class="token punctuation">,</span> <span class="token keyword">int</span> subdomain_size<span class="token punctuation">,</span>
          <span class="token keyword">int</span> domain_size<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>Walker<span class="token operator">&gt;</span><span class="token operator">*</span> outgoing_walkers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>walker<span class="token operator">-&gt;</span>num_steps_left_in_walk <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//依旧要走</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>walker<span class="token operator">-&gt;</span>location <span class="token operator">==</span> subdomain_start <span class="token operator">+</span> subdomain_size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          	<span class="token comment">//超出子域大小</span>
            <span class="token comment">// Take care of the case when the walker is at the end</span>
            <span class="token comment">// of the domain by wrapping it around to the beginning</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>walker<span class="token operator">-&gt;</span>location <span class="token operator">==</span> domain_size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                walker<span class="token operator">-&gt;</span>location <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
          	<span class="token comment">//记录到要走出的walker队列中</span>
            outgoing_walkers<span class="token operator">-&gt;</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token operator">*</span>walker<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          	<span class="token comment">//走一步</span>
            walker<span class="token operator">-&gt;</span>num_steps_left_in_walk<span class="token operator">--</span><span class="token punctuation">;</span>
            walker<span class="token operator">-&gt;</span>location<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们已经建立了初始化函数（用于填充传入的 walker 列表）和移动函数（用于填充传出的 walker 列表），我们仅再需要两个函数：发送待传出的 walker 的函数和接收待传入的 walker 的函数。 发送功能如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">send_outgoing_walkers</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>Walker<span class="token operator">&gt;</span><span class="token operator">*</span> outgoing_walkers<span class="token punctuation">,</span> 
                           <span class="token keyword">int</span> world_rank<span class="token punctuation">,</span> <span class="token keyword">int</span> world_size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Send the data as an array of MPI_BYTEs to the next process.</span>
    <span class="token comment">// The last process sends to process zero.</span>
  	<span class="token comment">// 这里data()是vector的内置函数返回一个指针指向数据列表的第一个元素</span>
    <span class="token function">MPI_Send</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>outgoing_walkers<span class="token operator">-&gt;</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
             outgoing_walkers<span class="token operator">-&gt;</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Walker<span class="token punctuation">)</span><span class="token punctuation">,</span> MPI_BYTE<span class="token punctuation">,</span>
             <span class="token punctuation">(</span>world_rank <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> world_size<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> MPI_COMM_WORLD<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Clear the outgoing walkers</span>
    outgoing_walkers<span class="token operator">-&gt;</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接收传入的 walkers 的函数应该使用 <code>MPI_Probe</code>，因为它事先不知道将接收多少 walkers。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">receive_incoming_walkers</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>Walker<span class="token operator">&gt;</span><span class="token operator">*</span> incoming_walkers<span class="token punctuation">,</span>
                              <span class="token keyword">int</span> world_rank<span class="token punctuation">,</span> <span class="token keyword">int</span> world_size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    MPI_Status status<span class="token punctuation">;</span>

    <span class="token comment">// Receive from the process before you. If you are process zero,</span>
    <span class="token comment">// receive from the last process</span>
    <span class="token keyword">int</span> incoming_rank <span class="token operator">=</span>
        <span class="token punctuation">(</span>world_rank <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> world_size <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">:</span> world_rank <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">MPI_Probe</span><span class="token punctuation">(</span>incoming_rank<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Resize your incoming walker buffer based on how much data is</span>
    <span class="token comment">// being received</span>
    <span class="token keyword">int</span> incoming_walkers_size<span class="token punctuation">;</span>
    <span class="token function">MPI_Get_count</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>status<span class="token punctuation">,</span> MPI_BYTE<span class="token punctuation">,</span> <span class="token operator">&amp;</span>incoming_walkers_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    incoming_walkers<span class="token operator">-&gt;</span><span class="token function">resize</span><span class="token punctuation">(</span>
        incoming_walkers_size <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Walker<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">MPI_Recv</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>incoming_walkers<span class="token operator">-&gt;</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> incoming_walkers_size<span class="token punctuation">,</span>
             MPI_BYTE<span class="token punctuation">,</span> incoming_rank<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> MPI_COMM_WORLD<span class="token punctuation">,</span>
             MPI_STATUS_IGNORE<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们已经建立了程序的主要功能。 我们必须将所有这些功能集成在一起，如下所示：</p><ol><li>初始化 walkers.</li><li>使用 <code>walk</code> 函数使 walkers 前进。</li><li>发出 <code>outgoing_walkers</code> 向量中的所有的 walkers。</li><li>将新接收的 walkers 放入 <code>incoming_walkers</code> 向量中。</li><li>重复步骤 2 到 4，直到所有 walkers 完成。</li></ol><p>下面是完成此程序的第一次尝试。 此刻，我们不必担心如何确定所有 walkers 完成的时间。 但在查看代码之前，我必须警告您-该代码不正确！ 知晓这个问题以后，让我们看一下代码，希望您能发现它可能有什么问题。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// Find your part of the domain</span>
<span class="token function">decompose_domain</span><span class="token punctuation">(</span>domain_size<span class="token punctuation">,</span> world_rank<span class="token punctuation">,</span> world_size<span class="token punctuation">,</span>
                 <span class="token operator">&amp;</span>subdomain_start<span class="token punctuation">,</span> <span class="token operator">&amp;</span>subdomain_size<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Initialize walkers in your subdomain</span>
<span class="token function">initialize_walkers</span><span class="token punctuation">(</span>num_walkers_per_proc<span class="token punctuation">,</span> max_walk_size<span class="token punctuation">,</span>
                   subdomain_start<span class="token punctuation">,</span> subdomain_size<span class="token punctuation">,</span>
                   <span class="token operator">&amp;</span>incoming_walkers<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>all_walkers_finished<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// Determine walker completion later</span>
    <span class="token comment">// Process all incoming walkers</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> incoming_walkers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">walk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>incoming_walkers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> subdomain_start<span class="token punctuation">,</span> subdomain_size<span class="token punctuation">,</span>
             domain_size<span class="token punctuation">,</span> <span class="token operator">&amp;</span>outgoing_walkers<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>

    <span class="token comment">// Send all outgoing walkers to the next process.</span>
    <span class="token function">send_outgoing_walkers</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>outgoing_walkers<span class="token punctuation">,</span> world_rank<span class="token punctuation">,</span>
                          world_size<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Receive all the new incoming walkers</span>
    <span class="token function">receive_incoming_walkers</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>incoming_walkers<span class="token punctuation">,</span> world_rank<span class="token punctuation">,</span>
                             world_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一切看起来都很正常，但是函数调用的顺序引入了一种非常可能的情形 - <strong>死锁</strong>。</p><h3 id="死锁及预防" tabindex="-1"><a class="header-anchor" href="#死锁及预防" aria-hidden="true">#</a> 死锁及预防</h3><p>死锁 <em>是指两个或多个进程各自在等待另一个进程释放资源，或者两个或多个进程在循环链中等待资源的特定条件</em></p>`,65),I=n("code",null,"MPI_Send",-1),P={href:"http://www.amazon.com/gp/product/0262692163/ref=as_li_tf_tl?ie=UTF8&tag=softengiintet-20&linkCode=as2&camp=217145&creative=399377&creativeASIN=0262692163",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"MPI_Send",-1),z=n("strong",null,"回收发送缓冲区为止",-1),R=n("code",null,"MPI_Send",-1),S=t(`<p>避免可能发生的发送和接收死锁的最佳方法是对消息进行排序，以使发送将具有匹配的接收，反之亦然。 一种简单的方法是更改循环，以使偶数编号的进程在接收 walkers 之前发送传出的 walkers，而奇数编号的进程则相反。</p><p><img src="https://pics.yujieliu.com/blog/2023/11/209fbc23d2961baa8fdbf94971199045.png" alt="Deadlock prevention"></p><p>这种方法也适用于奇数个线程的情况</p><p><img src="https://pics.yujieliu.com/blog/2023/11/9809a1bc4ed8a95a848e08513cb17657.png" alt="Deadlock solution"></p><h3 id="determining-completion-of-all-walkers" tabindex="-1"><a class="header-anchor" href="#determining-completion-of-all-walkers" aria-hidden="true">#</a> Determining completion of all walkers</h3><p>程序的最后一步是确定每个 walker 何时结束。 由于 walkers 可以随机行走，因此它们可以在任何一个进程中结束它们的旅程。 因此，如果没有某种额外的通信，所有进程都很难知道 walkers 何时全部结束。 一种可能的解决方案是让进程零跟踪所有已完成的 walker，然后告诉其他所有进程何时终止。 但是，这样的解决方案非常麻烦，因为每个进程都必须向进程 0 报告所有完成的 walker，然后还要处理不同类型的传入消息。</p><p>在本文中，我们让这件事情稍微简单一点。 由于我们知道任意一个 walker 可以行进的最大距离和每对发送和接收对它可以行进的最小总大小（子域大小），因此我们可以计算出终止之前每个进程应该执行的发送和接收量。 在我们避免死锁的策略中考虑这一特征，该程序的最后主要部分如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// Find your part of the domain</span>
<span class="token function">decompose_domain</span><span class="token punctuation">(</span>domain_size<span class="token punctuation">,</span> world_rank<span class="token punctuation">,</span> world_size<span class="token punctuation">,</span>
                 <span class="token operator">&amp;</span>subdomain_start<span class="token punctuation">,</span> <span class="token operator">&amp;</span>subdomain_size<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Initialize walkers in your subdomain</span>
<span class="token function">initialize_walkers</span><span class="token punctuation">(</span>num_walkers_per_proc<span class="token punctuation">,</span> max_walk_size<span class="token punctuation">,</span>
                  subdomain_start<span class="token punctuation">,</span> subdomain_size<span class="token punctuation">,</span>
                  <span class="token operator">&amp;</span>incoming_walkers<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Determine the maximum amount of sends and receives needed to </span>
<span class="token comment">// complete all walkers</span>
<span class="token keyword">int</span> maximum_sends_recvs <span class="token operator">=</span>
    max_walk_size <span class="token operator">/</span> <span class="token punctuation">(</span>domain_size <span class="token operator">/</span> world_size<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> m <span class="token operator">&lt;</span> maximum_sends_recvs<span class="token punctuation">;</span> m<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Process all incoming walkers</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> incoming_walkers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">walk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>incoming_walkers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> subdomain_start<span class="token punctuation">,</span> subdomain_size<span class="token punctuation">,</span>
             domain_size<span class="token punctuation">,</span> <span class="token operator">&amp;</span>outgoing_walkers<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>

    <span class="token comment">// Send and receive if you are even and vice versa for odd</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>world_rank <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">send_outgoing_walkers</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>outgoing_walkers<span class="token punctuation">,</span> world_rank<span class="token punctuation">,</span>
                              world_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">receive_incoming_walkers</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>incoming_walkers<span class="token punctuation">,</span> world_rank<span class="token punctuation">,</span>
                                 world_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">receive_incoming_walkers</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>incoming_walkers<span class="token punctuation">,</span> world_rank<span class="token punctuation">,</span>
                                 world_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">send_outgoing_walkers</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>outgoing_walkers<span class="token punctuation">,</span> world_rank<span class="token punctuation">,</span>
                              world_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8);function N(O,x){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,n("p",null,[s("Refer and conclude from the "),n("a",r,[s("MPI Tutorial"),e(a)])]),d,k,m,n("h2",v,[b,s(),n("a",_,[s("MPI Helloworld"),e(a)])]),w,n("h2",g,[M,s(),n("a",h,[s("MPI Send an Receive"),e(a)])]),f,n("p",null,[s("上面的代码在大多数情况下实际上不会“死锁”。 尽管 "),I,s("是一个阻塞调用，但是 "),n("a",P,[s("MPI 规范"),e(a)]),s(" 表明 "),y,s(" 会一直阻塞，直到可以"),z,s("。 这意味着当网络可以缓冲消息时，"),R,s(" 将返回。 如果发送最终无法被网络缓冲，它们将一直阻塞直到发布匹配的接收。 在我们的例子中，有足够多的小发送和频繁匹配的接收而不必担心死锁，但是，永远不该假定有足够大的网络缓冲区。")]),S])}const C=p(l,[["render",N],["__file","MPI.html.vue"]]);export{C as default};
