const e=JSON.parse(`{"key":"v-60031f6c","path":"/blogs/java/concurrency/thread-pool.html","title":"ThreadPool线程池","lang":"en-US","frontmatter":{"description":"ThreadPool线程池 /** * Creates a new {@code ThreadPoolExecutor} with the given initial * parameters. * * @param corePoolSize the number of threads to keep in the pool, even * if they are idle, unless {@code allowCoreThreadTimeOut} is set * @param maximumPoolSize the maximum number of threads to allow in the * pool * @param keepAliveTime when the number of threads is greater than * the core, this is the maximum time that excess idle threads * will wait for new tasks before terminating. * @param unit the time unit for the {@code keepAliveTime} argument * @param workQueue the queue to use for holding tasks before they are * executed. This queue will hold only the {@code Runnable} * tasks submitted by the {@code execute} method. * @param threadFactory the factory to use when the executor * creates a new thread * @param handler the handler to use when execution is blocked * because the thread bounds and queue capacities are reached * @throws IllegalArgumentException if one of the following holds:&lt;br&gt; * {@code corePoolSize &lt; 0}&lt;br&gt; * {@code keepAliveTime &lt; 0}&lt;br&gt; * {@code maximumPoolSize &lt;= 0}&lt;br&gt; * {@code maximumPoolSize &lt; corePoolSize} * @throws NullPointerException if {@code workQueue} * or {@code threadFactory} or {@code handler} is null */ public ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler) { if (corePoolSize &lt; 0 || maximumPoolSize &lt;= 0 || maximumPoolSize &lt; corePoolSize || keepAliveTime &lt; 0) throw new IllegalArgumentException(); if (workQueue == null || threadFactory == null || handler == null) throw new NullPointerException(); this.corePoolSize = corePoolSize; this.maximumPoolSize = maximumPoolSize; this.workQueue = workQueue; this.keepAliveTime = unit.toNanos(keepAliveTime); this.threadFactory = threadFactory; this.handler = handler; }","head":[["meta",{"property":"og:url","content":"https://blog.yujieliu.com/blogs/java/concurrency/thread-pool.html"}],["meta",{"property":"og:site_name","content":"Yujie's blog"}],["meta",{"property":"og:title","content":"ThreadPool线程池"}],["meta",{"property":"og:description","content":"ThreadPool线程池 /** * Creates a new {@code ThreadPoolExecutor} with the given initial * parameters. * * @param corePoolSize the number of threads to keep in the pool, even * if they are idle, unless {@code allowCoreThreadTimeOut} is set * @param maximumPoolSize the maximum number of threads to allow in the * pool * @param keepAliveTime when the number of threads is greater than * the core, this is the maximum time that excess idle threads * will wait for new tasks before terminating. * @param unit the time unit for the {@code keepAliveTime} argument * @param workQueue the queue to use for holding tasks before they are * executed. This queue will hold only the {@code Runnable} * tasks submitted by the {@code execute} method. * @param threadFactory the factory to use when the executor * creates a new thread * @param handler the handler to use when execution is blocked * because the thread bounds and queue capacities are reached * @throws IllegalArgumentException if one of the following holds:&lt;br&gt; * {@code corePoolSize &lt; 0}&lt;br&gt; * {@code keepAliveTime &lt; 0}&lt;br&gt; * {@code maximumPoolSize &lt;= 0}&lt;br&gt; * {@code maximumPoolSize &lt; corePoolSize} * @throws NullPointerException if {@code workQueue} * or {@code threadFactory} or {@code handler} is null */ public ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler) { if (corePoolSize &lt; 0 || maximumPoolSize &lt;= 0 || maximumPoolSize &lt; corePoolSize || keepAliveTime &lt; 0) throw new IllegalArgumentException(); if (workQueue == null || threadFactory == null || handler == null) throw new NullPointerException(); this.corePoolSize = corePoolSize; this.maximumPoolSize = maximumPoolSize; this.workQueue = workQueue; this.keepAliveTime = unit.toNanos(keepAliveTime); this.threadFactory = threadFactory; this.handler = handler; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-03-15T17:45:22.000Z"}],["meta",{"property":"article:author","content":"Yujie Liu"}],["meta",{"property":"article:modified_time","content":"2024-03-15T17:45:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ThreadPool线程池\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-15T17:45:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Yujie Liu\\",\\"url\\":\\"https://blog.yujieliu.com/intro.html\\"}]}"]]},"headers":[],"git":{"createdTime":1710524722000,"updatedTime":1710524722000,"contributors":[{"name":"Jeff Liu","email":"47711081+LiuLiujie@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":0.95,"words":285},"filePathRelative":"blogs/java/concurrency/thread-pool.md","localizedDate":"March 15, 2024","excerpt":"<h1> ThreadPool线程池</h1>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token doc-comment comment\\">/**\\n * Creates a new <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span> <span class=\\"token code-section\\"><span class=\\"token code language-java\\"><span class=\\"token class-name\\">ThreadPoolExecutor</span></span></span><span class=\\"token punctuation\\">}</span> with the given initial\\n * parameters.\\n *\\n * <span class=\\"token keyword\\">@param</span> <span class=\\"token parameter\\">corePoolSize</span> the number of threads to keep in the pool, even\\n *        if they are idle, unless <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span> <span class=\\"token code-section\\"><span class=\\"token code language-java\\">allowCoreThreadTimeOut</span></span><span class=\\"token punctuation\\">}</span> is set\\n * <span class=\\"token keyword\\">@param</span> <span class=\\"token parameter\\">maximumPoolSize</span> the maximum number of threads to allow in the\\n *        pool\\n * <span class=\\"token keyword\\">@param</span> <span class=\\"token parameter\\">keepAliveTime</span> when the number of threads is greater than\\n *        the core, this is the maximum time that excess idle threads\\n *        will wait for new tasks before terminating.\\n * <span class=\\"token keyword\\">@param</span> <span class=\\"token parameter\\">unit</span> the time unit for the <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span> <span class=\\"token code-section\\"><span class=\\"token code language-java\\">keepAliveTime</span></span><span class=\\"token punctuation\\">}</span> argument\\n * <span class=\\"token keyword\\">@param</span> <span class=\\"token parameter\\">workQueue</span> the queue to use for holding tasks before they are\\n *        executed.  This queue will hold only the <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span> <span class=\\"token code-section\\"><span class=\\"token code language-java\\"><span class=\\"token class-name\\">Runnable</span></span></span><span class=\\"token punctuation\\">}</span>\\n *        tasks submitted by the <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span> <span class=\\"token code-section\\"><span class=\\"token code language-java\\">execute</span></span><span class=\\"token punctuation\\">}</span> method.\\n * <span class=\\"token keyword\\">@param</span> <span class=\\"token parameter\\">threadFactory</span> the factory to use when the executor\\n *        creates a new thread\\n * <span class=\\"token keyword\\">@param</span> <span class=\\"token parameter\\">handler</span> the handler to use when execution is blocked\\n *        because the thread bounds and queue capacities are reached\\n * <span class=\\"token keyword\\">@throws</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">IllegalArgumentException</span></span> if one of the following holds:<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>br</span><span class=\\"token punctuation\\">&gt;</span></span>\\n *         <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span> <span class=\\"token code-section\\"><span class=\\"token code language-java\\">corePoolSize <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">0</span></span></span><span class=\\"token punctuation\\">}</span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>br</span><span class=\\"token punctuation\\">&gt;</span></span>\\n *         <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span> <span class=\\"token code-section\\"><span class=\\"token code language-java\\">keepAliveTime <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">0</span></span></span><span class=\\"token punctuation\\">}</span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>br</span><span class=\\"token punctuation\\">&gt;</span></span>\\n *         <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span> <span class=\\"token code-section\\"><span class=\\"token code language-java\\">maximumPoolSize <span class=\\"token operator\\">&lt;=</span> <span class=\\"token number\\">0</span></span></span><span class=\\"token punctuation\\">}</span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>br</span><span class=\\"token punctuation\\">&gt;</span></span>\\n *         <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span> <span class=\\"token code-section\\"><span class=\\"token code language-java\\">maximumPoolSize <span class=\\"token operator\\">&lt;</span> corePoolSize</span></span><span class=\\"token punctuation\\">}</span>\\n * <span class=\\"token keyword\\">@throws</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">NullPointerException</span></span> if <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span> <span class=\\"token code-section\\"><span class=\\"token code language-java\\">workQueue</span></span><span class=\\"token punctuation\\">}</span>\\n *         or <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span> <span class=\\"token code-section\\"><span class=\\"token code language-java\\">threadFactory</span></span><span class=\\"token punctuation\\">}</span> or <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span> <span class=\\"token code-section\\"><span class=\\"token code language-java\\">handler</span></span><span class=\\"token punctuation\\">}</span> is null\\n */</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">ThreadPoolExecutor</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> corePoolSize<span class=\\"token punctuation\\">,</span>\\n                          <span class=\\"token keyword\\">int</span> maximumPoolSize<span class=\\"token punctuation\\">,</span>\\n                          <span class=\\"token keyword\\">long</span> keepAliveTime<span class=\\"token punctuation\\">,</span>\\n                          <span class=\\"token class-name\\">TimeUnit</span> unit<span class=\\"token punctuation\\">,</span>\\n                          <span class=\\"token class-name\\">BlockingQueue</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Runnable</span><span class=\\"token punctuation\\">&gt;</span></span> workQueue<span class=\\"token punctuation\\">,</span>\\n                          <span class=\\"token class-name\\">ThreadFactory</span> threadFactory<span class=\\"token punctuation\\">,</span>\\n                          <span class=\\"token class-name\\">RejectedExecutionHandler</span> handler<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>corePoolSize <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">0</span> <span class=\\"token operator\\">||</span>\\n        maximumPoolSize <span class=\\"token operator\\">&lt;=</span> <span class=\\"token number\\">0</span> <span class=\\"token operator\\">||</span>\\n        maximumPoolSize <span class=\\"token operator\\">&lt;</span> corePoolSize <span class=\\"token operator\\">||</span>\\n        keepAliveTime <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token keyword\\">throw</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">IllegalArgumentException</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>workQueue <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span> <span class=\\"token operator\\">||</span> threadFactory <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span> <span class=\\"token operator\\">||</span> handler <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token keyword\\">throw</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">NullPointerException</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>corePoolSize <span class=\\"token operator\\">=</span> corePoolSize<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>maximumPoolSize <span class=\\"token operator\\">=</span> maximumPoolSize<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>workQueue <span class=\\"token operator\\">=</span> workQueue<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>keepAliveTime <span class=\\"token operator\\">=</span> unit<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toNanos</span><span class=\\"token punctuation\\">(</span>keepAliveTime<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>threadFactory <span class=\\"token operator\\">=</span> threadFactory<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>handler <span class=\\"token operator\\">=</span> handler<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{e as data};
