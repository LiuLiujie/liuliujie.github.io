const e=JSON.parse(`{"key":"v-777e7f7e","path":"/blogs/hpc/cuda-tutorial-chinese/","title":"CUDA Tutorial Chinese","lang":"en-US","frontmatter":{"category":"Computer Science","tag":["CUDA","GPGPU"],"description":"CUDA Tutorial Chinese 内核启动 在CUDA中，启动内核函数时可以传递以下参数： 网格维度（Grid Dimension）：指定了在GPU上启动的线程块的数量和排列方式。使用dim3类型的变量来表示，可以指定三个维度（x、y和z）。例如，dim3 gridDim(16, 8, 1);表示启动了一个大小为16x8的二维线程块网格。 块维度（Block Dimension）：指定了每个线程块中的线程数量和排列方式。同样，使用dim3类型的变量来表示。例如，dim3 blockDim(256, 1, 1);表示每个线程块中有256个线程。 动态共享内存大小（Dynamic Shared Memory）：在启动内核时，可以为每个线程块分配一定大小的动态共享内存。通过在内核函数调用中使用&lt;&lt;&lt;...&gt;&gt;&gt;语法来指定共享内存的大小。例如，myKernel&lt;&lt;&lt;gridDim, blockDim, sharedMemSize&gt;&gt;&gt;();表示为每个线程块分配了sharedMemSize字节的动态共享内存。 流（Stream）：可选参数，用于指定内核执行的流。流可以用于控制内核的执行顺序和并发性。默认情况下，使用默认流。可以使用cudaStream_t类型的变量来表示流。","head":[["meta",{"property":"og:url","content":"https://blog.yujieliu.com/blogs/hpc/cuda-tutorial-chinese/"}],["meta",{"property":"og:site_name","content":"Yujie's blog"}],["meta",{"property":"og:title","content":"CUDA Tutorial Chinese"}],["meta",{"property":"og:description","content":"CUDA Tutorial Chinese 内核启动 在CUDA中，启动内核函数时可以传递以下参数： 网格维度（Grid Dimension）：指定了在GPU上启动的线程块的数量和排列方式。使用dim3类型的变量来表示，可以指定三个维度（x、y和z）。例如，dim3 gridDim(16, 8, 1);表示启动了一个大小为16x8的二维线程块网格。 块维度（Block Dimension）：指定了每个线程块中的线程数量和排列方式。同样，使用dim3类型的变量来表示。例如，dim3 blockDim(256, 1, 1);表示每个线程块中有256个线程。 动态共享内存大小（Dynamic Shared Memory）：在启动内核时，可以为每个线程块分配一定大小的动态共享内存。通过在内核函数调用中使用&lt;&lt;&lt;...&gt;&gt;&gt;语法来指定共享内存的大小。例如，myKernel&lt;&lt;&lt;gridDim, blockDim, sharedMemSize&gt;&gt;&gt;();表示为每个线程块分配了sharedMemSize字节的动态共享内存。 流（Stream）：可选参数，用于指定内核执行的流。流可以用于控制内核的执行顺序和并发性。默认情况下，使用默认流。可以使用cudaStream_t类型的变量来表示流。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-11-25T09:26:15.000Z"}],["meta",{"property":"article:author","content":"Yujie Liu"}],["meta",{"property":"article:tag","content":"CUDA"}],["meta",{"property":"article:tag","content":"GPGPU"}],["meta",{"property":"article:modified_time","content":"2023-11-25T09:26:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CUDA Tutorial Chinese\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-11-25T09:26:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Yujie Liu\\",\\"url\\":\\"https://blog.yujieliu.com/intro.html\\"}]}"]]},"headers":[{"level":2,"title":"内核启动","slug":"内核启动","link":"#内核启动","children":[]},{"level":2,"title":"内存模型","slug":"内存模型","link":"#内存模型","children":[]},{"level":2,"title":"Q&A","slug":"q-a","link":"#q-a","children":[{"level":3,"title":"What's the difference of __syncthreads() and cudaDeviceSynchronize() ?","slug":"what-s-the-difference-of-syncthreads-and-cudadevicesynchronize","link":"#what-s-the-difference-of-syncthreads-and-cudadevicesynchronize","children":[]}]}],"git":{"createdTime":1700904375000,"updatedTime":1700904375000,"contributors":[{"name":"Yujie","email":"yujie.liu.public@gmail.com","commits":1}]},"readingTime":{"minutes":2.28,"words":685},"filePathRelative":"blogs/hpc/cuda-tutorial-chinese/README.md","localizedDate":"November 25, 2023","excerpt":"<h1> CUDA Tutorial Chinese</h1>\\n<h2> 内核启动</h2>\\n<p>在CUDA中，启动内核函数时可以传递以下参数：</p>\\n<ol>\\n<li>网格维度（Grid Dimension）：指定了在GPU上启动的线程块的数量和排列方式。使用<code>dim3</code>类型的变量来表示，可以指定三个维度（x、y和z）。例如，<code>dim3 gridDim(16, 8, 1);</code>表示启动了一个大小为16x8的二维线程块网格。</li>\\n<li>块维度（Block Dimension）：指定了每个线程块中的线程数量和排列方式。同样，使用<code>dim3</code>类型的变量来表示。例如，<code>dim3 blockDim(256, 1, 1);</code>表示每个线程块中有256个线程。</li>\\n<li>动态共享内存大小（Dynamic Shared Memory）：在启动内核时，可以为每个线程块分配一定大小的动态共享内存。通过在内核函数调用中使用<code>&lt;&lt;&lt;...&gt;&gt;&gt;</code>语法来指定共享内存的大小。例如，<code>myKernel&lt;&lt;&lt;gridDim, blockDim, sharedMemSize&gt;&gt;&gt;();</code>表示为每个线程块分配了<code>sharedMemSize</code>字节的动态共享内存。</li>\\n<li>流（Stream）：可选参数，用于指定内核执行的流。流可以用于控制内核的执行顺序和并发性。默认情况下，使用默认流。可以使用<code>cudaStream_t</code>类型的变量来表示流。</li>\\n</ol>","autoDesc":true}`);export{e as data};
