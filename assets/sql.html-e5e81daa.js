import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as c,c as i,a as s,e as a,w as e,d as o,b as t}from"./app-9e8a13db.js";const r={},d=o(`<h1 id="sql-basic" tabindex="-1"><a class="header-anchor" href="#sql-basic" aria-hidden="true">#</a> SQL Basic</h1><h2 id="_1-crud" tabindex="-1"><a class="header-anchor" href="#_1-crud" aria-hidden="true">#</a> 1. CRUD</h2><h3 id="select" tabindex="-1"><a class="header-anchor" href="#select" aria-hidden="true">#</a> SELECT</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> CustomerName<span class="token punctuation">,</span> City <span class="token keyword">FROM</span> Customers<span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Customers<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="select-distinct" tabindex="-1"><a class="header-anchor" href="#select-distinct" aria-hidden="true">#</a> SELECT DISTINCT</h4><p>The <code>SELECT DISTINCT</code> statement is used to return only distinct (different) values. (只返回不同的值)</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> Country <span class="token keyword">FROM</span> Customers<span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> Country<span class="token punctuation">)</span> <span class="token keyword">FROM</span> Customers<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Exercises</p>`,8),u=o(`<h4 id="limit" tabindex="-1"><a class="header-anchor" href="#limit" aria-hidden="true">#</a> LIMIT</h4><p>Select the first 3 records of the Customers table:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Customers
<span class="token keyword">LIMIT</span> <span class="token number">3</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">#SQL Server</span>
<span class="token keyword">SELECT</span> <span class="token keyword">TOP</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Customers<span class="token punctuation">;</span>

<span class="token comment">#Oracle</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Customers
<span class="token keyword">FETCH</span> <span class="token keyword">FIRST</span> <span class="token number">3</span> <span class="token keyword">ROWS</span> ONLY<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="offset" tabindex="-1"><a class="header-anchor" href="#offset" aria-hidden="true">#</a> OFFSET</h4><p>Specify the starting row for retrieving data.</p><p>This is the number of rows to skip before starting the data retrieval.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> column_list <span class="token keyword">FROM</span> table_name
<span class="token keyword">WHERE</span> condition
<span class="token keyword">LIMIT</span> number
<span class="token keyword">OFFSET</span> offset_value<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The LIMIT and OFFSET can be used together</p><ul><li><code>m</code>: start from m (index starts from 0)</li><li><code>n</code>: n rows of data</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> column_list <span class="token keyword">FROM</span> table_name
<span class="token keyword">WHERE</span> condition
<span class="token keyword">LIMIT</span> m<span class="token punctuation">,</span> n
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：<code>LIMIT 1, 5</code>指的是返回2-6行</p><h4 id="as" tabindex="-1"><a class="header-anchor" href="#as" aria-hidden="true">#</a> AS</h4><p>Use a alias name instead of the column name</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> CustomerName <span class="token keyword">AS</span> Name
<span class="token keyword">FROM</span> Customers<span class="token punctuation">;</span>

<span class="token comment">#With a Space Character</span>
<span class="token keyword">SELECT</span> ProductName <span class="token keyword">AS</span> <span class="token string">&quot;My Great Products&quot;</span>
<span class="token comment">#SELECT ProductName AS [My Great Products]</span>
<span class="token keyword">FROM</span> Products<span class="token punctuation">;</span>

<span class="token comment">#Concatenate Columns</span>
<span class="token keyword">SELECT</span> CustomerName<span class="token punctuation">,</span> CONCAT<span class="token punctuation">(</span>Address<span class="token punctuation">,</span><span class="token string">&#39;, &#39;</span><span class="token punctuation">,</span>PostalCode<span class="token punctuation">,</span><span class="token string">&#39;, &#39;</span><span class="token punctuation">,</span>City<span class="token punctuation">,</span><span class="token string">&#39;, &#39;</span><span class="token punctuation">,</span>Country<span class="token punctuation">)</span> <span class="token keyword">AS</span> Address
<span class="token keyword">FROM</span> Customers<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Alias for tables</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> o<span class="token punctuation">.</span>OrderID<span class="token punctuation">,</span> o<span class="token punctuation">.</span>OrderDate<span class="token punctuation">,</span> c<span class="token punctuation">.</span>CustomerName
<span class="token keyword">FROM</span> Customers <span class="token keyword">AS</span> c<span class="token punctuation">,</span> Orders <span class="token keyword">AS</span> o
<span class="token keyword">WHERE</span> c<span class="token punctuation">.</span>CustomerName<span class="token operator">=</span><span class="token string">&#39;Around the Horn&#39;</span> <span class="token operator">AND</span> c<span class="token punctuation">.</span>CustomerID<span class="token operator">=</span>o<span class="token punctuation">.</span>CustomerID<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="where" tabindex="-1"><a class="header-anchor" href="#where" aria-hidden="true">#</a> WHERE</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Customers
<span class="token keyword">WHERE</span> Country<span class="token operator">=</span><span class="token string">&#39;Mexico&#39;</span><span class="token punctuation">;</span>
<span class="token comment">#WHERE CustomerID = 1;</span>
<span class="token comment">#WHERE CustomerID &gt; 80;</span>
<span class="token comment">#WHERE CustomerID BETWEEN 50 AND 60;</span>
<span class="token comment">#WHERE City LIKE &#39;s%&#39;;</span>
<span class="token comment">#WHERE City IN (&#39;Paris&#39;,&#39;London&#39;);</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Text Fields vs. Numeric Fields</strong></p><p>SQL requires single quotes around text values (most database systems will also allow double quotes). 字符串要用单引号括起来，大多数数据库也支持双引号</p><h4 id="like" tabindex="-1"><a class="header-anchor" href="#like" aria-hidden="true">#</a> LIKE</h4><p>The <code>LIKE</code> operator is used in a <code>WHERE</code> clause to search for a specified pattern in a column.</p><p>If no wildcard is specified, the phrase has to have an exact match to return a result.</p><p>There are two wildcards often used in conjunction with the <code>LIKE</code> operator:</p><ul><li>The percent sign <code>%</code> represents zero, one, or multiple characters</li><li>The underscore sign <code>_</code> represents one, single character</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">#Select all customers that starts with the letter &quot;a&quot;:</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Customers
<span class="token keyword">WHERE</span> CustomerName <span class="token operator">LIKE</span> <span class="token string">&#39;a%&#39;</span><span class="token punctuation">;</span>

<span class="token comment">#Return all customers from a city that contains the letter &#39;L&#39;:</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Customers
<span class="token keyword">WHERE</span> city <span class="token operator">LIKE</span> <span class="token string">&#39;%L%&#39;</span><span class="token punctuation">;</span>

<span class="token comment">#Return all customers that ends with &#39;a&#39;:</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Customers
<span class="token keyword">WHERE</span> CustomerName <span class="token operator">LIKE</span> <span class="token string">&#39;%a&#39;</span><span class="token punctuation">;</span>

<span class="token comment">#Return all customers that starts with &quot;b&quot; and ends with &quot;s&quot;:</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Customers
<span class="token keyword">WHERE</span> CustomerName <span class="token operator">LIKE</span> <span class="token string">&#39;b%s&#39;</span><span class="token punctuation">;</span>

<span class="token comment">#Return all customers from a city that starts with &#39;L&#39; followed by one wildcard character, then &#39;nd&#39; and then two wildcard characters:</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Customers
<span class="token keyword">WHERE</span> city <span class="token operator">LIKE</span> <span class="token string">&#39;L_nd__&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>More wildcard characters can be found later.</p><h4 id="and-or-and-not" tabindex="-1"><a class="header-anchor" href="#and-or-and-not" aria-hidden="true">#</a> AND, OR, and NOT</h4><p>The <code>WHERE</code> clause can contain one or many <code>AND</code> and <code>OR</code> operators.</p><p>These operators are used to filter records based on more than one conditions.</p><p>The <code>AND</code> operator displays a record if <em>all</em> the conditions are TRUE.</p><p>The <code>OR</code> operator displays a record if <em>any</em> of the conditions are TRUE.</p><p>The <code>NOT</code> operator is used in combination with other operators to give the opposite result, also called the negative result.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> Customers
<span class="token keyword">WHERE</span> Country <span class="token operator">=</span> <span class="token string">&#39;Spain&#39;</span> <span class="token operator">AND</span> CustomerName <span class="token operator">LIKE</span> <span class="token string">&#39;G%&#39;</span><span class="token punctuation">;</span>
<span class="token comment">#WHERE Country = &#39;Spain&#39; AND (CustomerName LIKE &#39;G%&#39; OR CustomerName LIKE &#39;R%&#39;);</span>
<span class="token comment">#WHERE NOT Country = &#39;Spain&#39;;</span>
<span class="token comment">#WHERE CustomerName NOT LIKE &#39;A%&#39;;</span>
<span class="token comment">#WHERE CustomerID NOT BETWEEN 10 AND 60;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="in-and-between" tabindex="-1"><a class="header-anchor" href="#in-and-between" aria-hidden="true">#</a> IN and BETWEEN</h4><p>The <code>IN</code> operator allows you to specify multiple values in a <code>WHERE</code> clause.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Customers
<span class="token keyword">WHERE</span> Country <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">&#39;Germany&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;France&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;UK&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Customers
<span class="token keyword">WHERE</span> CustomerID <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> CustomerID <span class="token keyword">FROM</span> Orders<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>BETWEEN</code> operator selects values within a given range. The values can be numbers, text, or dates.</p><p>The <code>BETWEEN</code> operator is inclusive: begin and end values are included.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Products
<span class="token keyword">WHERE</span> Price <span class="token operator">BETWEEN</span> <span class="token number">10</span> <span class="token operator">AND</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token comment">#AND CategoryID IN (1,2,3);</span>

<span class="token comment">#The following SQL statement selects all records with a ProductName alphabetically between Carnarvon Tigers and Mozzarella di Giovanni:</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Products
<span class="token keyword">WHERE</span> ProductName <span class="token operator">BETWEEN</span> <span class="token string">&#39;Carnarvon Tigers&#39;</span> <span class="token operator">AND</span> <span class="token string">&#39;Mozzarella di Giovanni&#39;</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> ProductName<span class="token punctuation">;</span>

<span class="token comment">#BETWEEN Dates</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Orders
<span class="token keyword">WHERE</span> OrderDate <span class="token operator">BETWEEN</span> <span class="token string">&#39;1996-07-01&#39;</span> <span class="token operator">AND</span> <span class="token string">&#39;1996-07-31&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="null" tabindex="-1"><a class="header-anchor" href="#null" aria-hidden="true">#</a> NULL</h4><p>It is not possible to test for NULL values with comparison operators, such as =, &lt;, or &lt;&gt;.</p><p>We will have to use the <code>IS NULL</code> and <code>IS NOT NULL</code> operators instead.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> column_names
<span class="token keyword">FROM</span> table_name
<span class="token keyword">WHERE</span> column_name <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="exist" tabindex="-1"><a class="header-anchor" href="#exist" aria-hidden="true">#</a> EXIST</h4><p>The <code>EXISTS</code> operator is used to test for the existence of any record in a subquery.</p><p>The <code>EXISTS</code> operator returns TRUE if the subquery returns one or more records.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">#returns TRUE and lists the suppliers with a product price less than 20</span>
<span class="token keyword">SELECT</span> SupplierName
<span class="token keyword">FROM</span> Suppliers
<span class="token keyword">WHERE</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> ProductName <span class="token keyword">FROM</span> Products <span class="token keyword">WHERE</span> Products<span class="token punctuation">.</span>SupplierID <span class="token operator">=</span> Suppliers<span class="token punctuation">.</span>supplierID <span class="token operator">AND</span> Price <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="any-and-all" tabindex="-1"><a class="header-anchor" href="#any-and-all" aria-hidden="true">#</a> ANY and ALL</h4><p>The <code>ANY</code> operator:</p><ul><li>returns a boolean value as a result</li><li>returns TRUE if ANY of the subquery values meet the condition</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token keyword">FROM</span> table_name
<span class="token keyword">WHERE</span> column_name operator <span class="token keyword">ANY</span>
  <span class="token punctuation">(</span><span class="token keyword">SELECT</span> column_name
  <span class="token keyword">FROM</span> table_name
  <span class="token keyword">WHERE</span> condition<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>ALL</code> operator:</p><ul><li>returns a boolean value as a result</li><li>returns TRUE if ALL of the subquery values meet the condition</li><li>is used with <code>SELECT</code>, <code>WHERE</code> and <code>HAVING</code> statements</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">#With SELECT</span>
<span class="token keyword">SELECT</span> <span class="token keyword">ALL</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token keyword">FROM</span> table_name
<span class="token keyword">WHERE</span> condition<span class="token punctuation">;</span>

<span class="token comment">#With WHERE or HAVING</span>
<span class="token keyword">SELECT</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token keyword">FROM</span> table_name
<span class="token keyword">WHERE</span> column_name operator <span class="token keyword">ALL</span>
  <span class="token punctuation">(</span><span class="token keyword">SELECT</span> column_name
  <span class="token keyword">FROM</span> table_name
  <span class="token keyword">WHERE</span> condition<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Lists the ProductName if it finds ANY records in the OrderDetails table has Quantity equal to 10 (this will return TRUE because the Quantity column has some values of 10)</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> ProductName
<span class="token keyword">FROM</span> Products
<span class="token keyword">WHERE</span> ProductID <span class="token operator">=</span> <span class="token keyword">ANY</span>
  <span class="token punctuation">(</span><span class="token keyword">SELECT</span> ProductID
  <span class="token keyword">FROM</span> OrderDetails
  <span class="token keyword">WHERE</span> Quantity <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Lists the ProductName if ALL the records in the OrderDetails table has Quantity equal to 10. This will of course return FALSE because the Quantity column has many different values (not only the value of 10):</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> ProductName
<span class="token keyword">FROM</span> Products
<span class="token keyword">WHERE</span> ProductID <span class="token operator">=</span> <span class="token keyword">ALL</span>
  <span class="token punctuation">(</span><span class="token keyword">SELECT</span> ProductID
  <span class="token keyword">FROM</span> OrderDetails
  <span class="token keyword">WHERE</span> Quantity <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="order-by" tabindex="-1"><a class="header-anchor" href="#order-by" aria-hidden="true">#</a> ORDER BY</h3><p>The <code>ORDER BY</code> keyword sorts the records in ascending order by default. To sort the records in descending order, use the <code>DESC</code> keyword.</p><p>For string values the <code>ORDER BY</code> keyword will order alphabetically.</p><p>For multiple columns, it means that it orders by the first one first, and then orders by the second column if the values for the first column are the same.</p><p>The <code>ASC</code> and <code>DESC</code> can be used at the same time for multiple columns.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Products
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> Price<span class="token punctuation">;</span>
<span class="token comment">#ORDER BY column1, column2, ... ASC|DESC;</span>
<span class="token comment">#ORDER BY Country ASC, CustomerName DESC;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="insert-into" tabindex="-1"><a class="header-anchor" href="#insert-into" aria-hidden="true">#</a> INSERT INTO</h3><p>The <code>INSERT INTO</code> statement is used to insert new records in a table.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">#Specify the columns, others will be null</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> table_name <span class="token punctuation">(</span>column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> column3<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
<span class="token keyword">VALUES</span> <span class="token punctuation">(</span>value1<span class="token punctuation">,</span> value2<span class="token punctuation">,</span> value3<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">#Insert to all columns</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> table_name
<span class="token keyword">VALUES</span> <span class="token punctuation">(</span>value1<span class="token punctuation">,</span> value2<span class="token punctuation">,</span> value3<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">#Insert multiple rows</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> Customers <span class="token punctuation">(</span>CustomerName<span class="token punctuation">,</span> ContactName<span class="token punctuation">,</span> Address<span class="token punctuation">,</span> City<span class="token punctuation">,</span> PostalCode<span class="token punctuation">,</span> Country<span class="token punctuation">)</span>
<span class="token keyword">VALUES</span>
<span class="token punctuation">(</span><span class="token string">&#39;Cardinal&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Tom B. Erichsen&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Skagen 21&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Stavanger&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;4006&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Norway&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">&#39;Greasy Burger&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Per Olsen&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Gateveien 15&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Sandnes&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;4306&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Norway&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">&#39;Tasty Tee&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Finn Egan&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Streetroad 19B&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Liverpool&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;L1 0AA&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;UK&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="update" tabindex="-1"><a class="header-anchor" href="#update" aria-hidden="true">#</a> UPDATE</h3><p>The <code>UPDATE</code> statement is used to modify the existing records in a table.</p><p>It is the <code>WHERE</code> clause that determines how many records will be updated.</p><p><strong>Note: If you omit the <code>WHERE</code> clause, all records in the table will be updated!</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">UPDATE</span> Customers
<span class="token keyword">SET</span> ContactName <span class="token operator">=</span> <span class="token string">&#39;Alfred Schmidt&#39;</span><span class="token punctuation">,</span> City<span class="token operator">=</span> <span class="token string">&#39;Frankfurt&#39;</span>
<span class="token keyword">WHERE</span> CustomerID <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment">#WHERE Country=&#39;Mexico&#39;;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="delete" tabindex="-1"><a class="header-anchor" href="#delete" aria-hidden="true">#</a> DELETE</h3><p>The <code>DELETE</code> statement is used to delete existing records in a table.</p><p><strong>Note: If you omit the <code>WHERE</code> clause, all records in the table will be deleted!</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> Customers
<span class="token keyword">WHERE</span> CustomerName<span class="token operator">=</span><span class="token string">&#39;Alfreds Futterkiste&#39;</span><span class="token punctuation">;</span>

<span class="token comment">#Delete all records in a table</span>
<span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> Customers<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="drop-table" tabindex="-1"><a class="header-anchor" href="#drop-table" aria-hidden="true">#</a> DROP TABLE</h4><p>To delete the table completely, use the <code>DROP TABLE</code> statement</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> Customers<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_2-built-in-functions-and-aggregation" tabindex="-1"><a class="header-anchor" href="#_2-built-in-functions-and-aggregation" aria-hidden="true">#</a> 2. Built-in functions and aggregation</h2><h3 id="min-and-max" tabindex="-1"><a class="header-anchor" href="#min-and-max" aria-hidden="true">#</a> MIN() and MAX()</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">MIN</span><span class="token punctuation">(</span>Price<span class="token punctuation">)</span>
<span class="token keyword">FROM</span> Products<span class="token punctuation">;</span>

<span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>Price<span class="token punctuation">)</span>
<span class="token keyword">FROM</span> Products<span class="token punctuation">;</span>

<span class="token keyword">SELECT</span> <span class="token function">MIN</span><span class="token punctuation">(</span>Price<span class="token punctuation">)</span> <span class="token keyword">AS</span> SmallestPrice
<span class="token keyword">FROM</span> Products<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="count" tabindex="-1"><a class="header-anchor" href="#count" aria-hidden="true">#</a> COUNT()</h3><p>If you specify a column instead of <code>(*)</code>, NULL values will not be counted.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>ProductID<span class="token punctuation">)</span>
<span class="token keyword">FROM</span> Products
<span class="token comment">#WHERE Price &gt; 20;</span>

<span class="token comment">#Ignore Duplicates</span>
<span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> Price<span class="token punctuation">)</span>
<span class="token keyword">FROM</span> Products<span class="token punctuation">;</span>

<span class="token comment">#Use a sentence as the alias name</span>
<span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token punctuation">[</span>number <span class="token keyword">of</span> records<span class="token punctuation">]</span>
<span class="token keyword">FROM</span> Products<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sum" tabindex="-1"><a class="header-anchor" href="#sum" aria-hidden="true">#</a> SUM()</h3><p>The <code>SUM()</code> function returns the total sum of a <strong>numeric column</strong>.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>Quantity<span class="token punctuation">)</span>
<span class="token keyword">FROM</span> OrderDetails<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="sum-with-an-expression" tabindex="-1"><a class="header-anchor" href="#sum-with-an-expression" aria-hidden="true">#</a> SUM() With an Expression</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>Quantity <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span>
<span class="token keyword">FROM</span> OrderDetails<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>Price <span class="token operator">*</span> Quantity<span class="token punctuation">)</span>
<span class="token keyword">FROM</span> OrderDetails
<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> Products <span class="token keyword">ON</span> OrderDetails<span class="token punctuation">.</span>ProductID <span class="token operator">=</span> Products<span class="token punctuation">.</span>ProductID<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="avg" tabindex="-1"><a class="header-anchor" href="#avg" aria-hidden="true">#</a> AVG()</h3><p>The <code>AVG()</code> function returns the average value of a numeric column.</p><p>NULL values are ignored.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>Price<span class="token punctuation">)</span>
<span class="token keyword">FROM</span> Products
<span class="token keyword">WHERE</span> CategoryID <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="higher-than-average" tabindex="-1"><a class="header-anchor" href="#higher-than-average" aria-hidden="true">#</a> Higher Than Average</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Products
<span class="token keyword">WHERE</span> price <span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">FROM</span> Products<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="group-by" tabindex="-1"><a class="header-anchor" href="#group-by" aria-hidden="true">#</a> GROUP BY</h3><p>The <code>GROUP BY</code> statement groups rows that have the same values into summary rows, like &quot;find the number of customers in each country&quot;.</p><p>The <code>GROUP BY</code> statement is often used with aggregate functions (<code>COUNT()</code>, <code>MAX()</code>, <code>MIN()</code>, <code>SUM()</code>, <code>AVG()</code>) to group the result-set by one or more columns.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token keyword">FROM</span> table_name
<span class="token keyword">WHERE</span> condition
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">#the number of customers in each country, sorted high to low</span>
<span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>CustomerID<span class="token punctuation">)</span><span class="token punctuation">,</span> Country
<span class="token keyword">FROM</span> Customers
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> Country<span class="token punctuation">;</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>CustomerID<span class="token punctuation">)</span> <span class="token keyword">DESC</span><span class="token punctuation">;</span>

<span class="token comment">#the number of orders sent by each shipper</span>
<span class="token keyword">SELECT</span> Shippers<span class="token punctuation">.</span>ShipperName<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>Orders<span class="token punctuation">.</span>OrderID<span class="token punctuation">)</span> <span class="token keyword">AS</span> NumberOfOrders <span class="token keyword">FROM</span> Orders
<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> Shippers <span class="token keyword">ON</span> Orders<span class="token punctuation">.</span>ShipperID <span class="token operator">=</span> Shippers<span class="token punctuation">.</span>ShipperID
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> ShipperName<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="having" tabindex="-1"><a class="header-anchor" href="#having" aria-hidden="true">#</a> HAVING</h3><p>The <code>HAVING</code> clause was added to SQL because the <code>WHERE</code> keyword cannot be used with aggregate functions.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">#lists the number of customers in each country. Only include countries with more than 5 customers, sorted high to low</span>
<span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>CustomerID<span class="token punctuation">)</span><span class="token punctuation">,</span> Country
<span class="token keyword">FROM</span> Customers
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> Country
<span class="token keyword">HAVING</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>CustomerID<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>CustomerID<span class="token punctuation">)</span> <span class="token keyword">DESC</span><span class="token punctuation">;</span>

<span class="token comment">#lists if the employees &quot;Davolio&quot; or &quot;Fuller&quot; have registered more than 25 orders:</span>
<span class="token keyword">SELECT</span> Employees<span class="token punctuation">.</span>LastName<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>Orders<span class="token punctuation">.</span>OrderID<span class="token punctuation">)</span> <span class="token keyword">AS</span> NumberOfOrders
<span class="token keyword">FROM</span> Orders
<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> Employees <span class="token keyword">ON</span> Orders<span class="token punctuation">.</span>EmployeeID <span class="token operator">=</span> Employees<span class="token punctuation">.</span>EmployeeID
<span class="token keyword">WHERE</span> LastName <span class="token operator">=</span> <span class="token string">&#39;Davolio&#39;</span> <span class="token operator">OR</span> LastName <span class="token operator">=</span> <span class="token string">&#39;Fuller&#39;</span>
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> LastName
<span class="token keyword">HAVING</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>Orders<span class="token punctuation">.</span>OrderID<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">25</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="null-functions" tabindex="-1"><a class="header-anchor" href="#null-functions" aria-hidden="true">#</a> NULL functions</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">#if any of the &quot;UnitsOnOrder&quot; values are NULL, the result will be NULL.</span>
<span class="token keyword">SELECT</span> ProductName<span class="token punctuation">,</span> UnitPrice <span class="token operator">*</span> <span class="token punctuation">(</span>UnitsInStock <span class="token operator">+</span> UnitsOnOrder<span class="token punctuation">)</span>
<span class="token keyword">FROM</span> Products<span class="token punctuation">;</span>

<span class="token comment">#The MySQL IFNULL() function lets you return an alternative value if an expression is NULL:</span>
<span class="token keyword">SELECT</span> ProductName<span class="token punctuation">,</span> UnitPrice <span class="token operator">*</span> <span class="token punctuation">(</span>UnitsInStock <span class="token operator">+</span> IFNULL<span class="token punctuation">(</span>UnitsOnOrder<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">FROM</span> Products

<span class="token comment">#or we can use the COALESCE() function, like this:</span>
<span class="token keyword">SELECT</span> ProductName<span class="token punctuation">,</span> UnitPrice <span class="token operator">*</span> <span class="token punctuation">(</span>UnitsInStock <span class="token operator">+</span> <span class="token keyword">COALESCE</span><span class="token punctuation">(</span>UnitsOnOrder<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">FROM</span> Products<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-join" tabindex="-1"><a class="header-anchor" href="#_3-join" aria-hidden="true">#</a> 3. JOIN</h2><p>A <code>JOIN</code> clause is used to combine rows from two or more tables, based on a related column between them.</p><p>Here are the different types of the JOINs in SQL:</p><ul><li><code>(INNER) JOIN</code>: Returns records that have matching values in both tables. 两个表均有记录</li><li><code>LEFT (OUTER) JOIN</code>: Returns all records from the left table, and the matched records from the right table. 左表全部，右表有记录</li><li><code>RIGHT (OUTER) JOIN</code>: Returns all records from the right table, and the matched records from the left table. 右表全部，左表有记录</li><li><code>FULL (OUTER) JOIN</code>: Returns all records when there is a match in either left or right table. <code>FULL OUTER JOIN</code> and <code>FULL JOIN</code> are the same. 全部返回</li></ul><p><img src="https://pics.yujieliu.com/blog/2023/10/c9c2583b40dfd806e714fdd4f552628a.png" alt="Screenshot 2023-10-21 at 12.09.37"></p><h3 id="inner-join-default-for-join" tabindex="-1"><a class="header-anchor" href="#inner-join-default-for-join" aria-hidden="true">#</a> INNER JOIN (default for JOIN)</h3><p>The <code>INNER JOIN</code> keyword returns only rows with a match in <strong>both tables</strong>. Which means that if you have a product with no CategoryID, or with a CategoryID that is not present in the Categories table, that record would not be returned in the result.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> ProductID<span class="token punctuation">,</span> ProductName<span class="token punctuation">,</span> CategoryName
<span class="token keyword">FROM</span> Products
<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> Categories <span class="token keyword">ON</span> Products<span class="token punctuation">.</span>CategoryID <span class="token operator">=</span> Categories<span class="token punctuation">.</span>CategoryID<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="self-join" tabindex="-1"><a class="header-anchor" href="#self-join" aria-hidden="true">#</a> SELF JOIN</h3><p>The following SQL statement matches customers that are from the same city:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># &lt;&gt; means not equal to</span>
<span class="token keyword">SELECT</span> A<span class="token punctuation">.</span>CustomerName <span class="token keyword">AS</span> CustomerName1<span class="token punctuation">,</span> B<span class="token punctuation">.</span>CustomerName <span class="token keyword">AS</span> CustomerName2<span class="token punctuation">,</span> A<span class="token punctuation">.</span>City
<span class="token keyword">FROM</span> Customers A<span class="token punctuation">,</span> Customers B
<span class="token keyword">WHERE</span> A<span class="token punctuation">.</span>CustomerID <span class="token operator">&lt;&gt;</span> B<span class="token punctuation">.</span>CustomerID
<span class="token operator">AND</span> A<span class="token punctuation">.</span>City <span class="token operator">=</span> B<span class="token punctuation">.</span>City
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> A<span class="token punctuation">.</span>City<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-union" tabindex="-1"><a class="header-anchor" href="#_4-union" aria-hidden="true">#</a> 4. UNION</h2><p>The <code>UNION</code> operator is used to combine the result-set of two or more <code>SELECT</code> statements.</p><ul><li>Every <code>SELECT</code> statement within <code>UNION</code> must have the same number of columns</li><li>The columns must also have similar data types</li><li>The columns in every <code>SELECT</code> statement must also be in the same order</li></ul><p>The following SQL statement returns the cities (only distinct values) from both the &quot;Customers&quot; and the &quot;Suppliers&quot; table:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> City <span class="token keyword">FROM</span> Customers
<span class="token keyword">UNION</span>
<span class="token keyword">SELECT</span> City <span class="token keyword">FROM</span> Suppliers
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> City<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>UNION</code> operator selects only distinct values by default. To allow duplicate values, use <code>UNION ALL</code>. The following SQL statement returns the cities (duplicate values also) from both the &quot;Customers&quot; and the &quot;Suppliers&quot; table:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> City <span class="token keyword">FROM</span> Customers
<span class="token keyword">UNION</span> <span class="token keyword">ALL</span>
<span class="token keyword">SELECT</span> City <span class="token keyword">FROM</span> Suppliers
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> City<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The following SQL statement returns the German cities (only distinct values) from both the &quot;Customers&quot; and the &quot;Suppliers&quot; table:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> City<span class="token punctuation">,</span> Country <span class="token keyword">FROM</span> Customers
<span class="token keyword">WHERE</span> Country<span class="token operator">=</span><span class="token string">&#39;Germany&#39;</span>
<span class="token keyword">UNION</span>
<span class="token keyword">SELECT</span> City<span class="token punctuation">,</span> Country <span class="token keyword">FROM</span> Suppliers
<span class="token keyword">WHERE</span> Country<span class="token operator">=</span><span class="token string">&#39;Germany&#39;</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> City<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here we have created a temporary column named &quot;Type&quot;, that list whether the contact person is a &quot;Customer&quot; or a &quot;Supplier&quot;.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token string">&#39;Customer&#39;</span> <span class="token keyword">AS</span> <span class="token keyword">Type</span><span class="token punctuation">,</span> ContactName<span class="token punctuation">,</span> City<span class="token punctuation">,</span> Country
<span class="token keyword">FROM</span> Customers
<span class="token keyword">UNION</span>
<span class="token keyword">SELECT</span> <span class="token string">&#39;Supplier&#39;</span><span class="token punctuation">,</span> ContactName<span class="token punctuation">,</span> City<span class="token punctuation">,</span> Country
<span class="token keyword">FROM</span> Suppliers<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-wildcard-characters" tabindex="-1"><a class="header-anchor" href="#_4-wildcard-characters" aria-hidden="true">#</a> 4. Wildcard Characters</h2><table><thead><tr><th style="text-align:left;">Symbol</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;">%</td><td style="text-align:left;">Represents zero or more characters</td></tr><tr><td style="text-align:left;">_</td><td style="text-align:left;">Represents a single character</td></tr><tr><td style="text-align:left;">[]</td><td style="text-align:left;">Represents any single character within the brackets *</td></tr><tr><td style="text-align:left;">^</td><td style="text-align:left;">Represents any character not in the brackets *</td></tr><tr><td style="text-align:left;">-</td><td style="text-align:left;">Represents any single character within the specified range *</td></tr><tr><td style="text-align:left;">{}</td><td style="text-align:left;">Represents any escaped character **</td></tr></tbody></table><p>* Not supported in PostgreSQL and MySQL databases.</p><p>** Supported only in Oracle databases.</p><h2 id="_5-select-into-and-insert-into-select" tabindex="-1"><a class="header-anchor" href="#_5-select-into-and-insert-into-select" aria-hidden="true">#</a> 5. SELECT INTO and INSERT INTO SELECT</h2><p>The <code>SELECT INTO</code> statement copies data from one table into a new table.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token comment">#SELECT column1, column2, column3, ...</span>
<span class="token keyword">INTO</span> newtable <span class="token punctuation">[</span><span class="token operator">IN</span> externaldb<span class="token punctuation">]</span>
<span class="token keyword">FROM</span> oldtable
<span class="token keyword">WHERE</span> condition<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Creates a backup copy of Customers:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">INTO</span> CustomersBackup2017 <span class="token operator">IN</span> <span class="token string">&#39;Backup.mdb&#39;</span>
<span class="token keyword">FROM</span> Customers<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>INSERT INTO SELECT</code> statement copies data from one table and inserts it into another table.</p><p>The <code>INSERT INTO SELECT</code> statement requires that the data types in source and target tables match.</p><p><strong>Note:</strong> The existing records in the target table are unaffected.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">#all columns</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> table2
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> table1
<span class="token keyword">WHERE</span> condition<span class="token punctuation">;</span>

<span class="token comment">#only some columns</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> table2 <span class="token punctuation">(</span>column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> column3<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
<span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> column3<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-case-expression" tabindex="-1"><a class="header-anchor" href="#_6-case-expression" aria-hidden="true">#</a> 6.CASE Expression</h2><p>The <code>CASE</code> expression goes through conditions and returns a value when the first condition is met (like an if-then-else statement). So, once a condition is true, it will stop reading and return the result. If no conditions are true, it returns the value in the <code>ELSE</code> clause.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">#Use in SELECT</span>
<span class="token keyword">SELECT</span> OrderID<span class="token punctuation">,</span> Quantity<span class="token punctuation">,</span>
<span class="token keyword">CASE</span>
    <span class="token keyword">WHEN</span> Quantity <span class="token operator">&gt;</span> <span class="token number">30</span> <span class="token keyword">THEN</span> <span class="token string">&#39;The quantity is greater than 30&#39;</span>
    <span class="token keyword">WHEN</span> Quantity <span class="token operator">=</span> <span class="token number">30</span> <span class="token keyword">THEN</span> <span class="token string">&#39;The quantity is 30&#39;</span>
    <span class="token keyword">ELSE</span> <span class="token string">&#39;The quantity is under 30&#39;</span>
<span class="token keyword">END</span> <span class="token keyword">AS</span> QuantityText
<span class="token keyword">FROM</span> OrderDetails<span class="token punctuation">;</span>

<span class="token comment">#Use in ORDER BY</span>
<span class="token keyword">SELECT</span> CustomerName<span class="token punctuation">,</span> City<span class="token punctuation">,</span> Country
<span class="token keyword">FROM</span> Customers
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span>
<span class="token punctuation">(</span><span class="token keyword">CASE</span>
    <span class="token keyword">WHEN</span> City <span class="token operator">IS</span> <span class="token boolean">NULL</span> <span class="token keyword">THEN</span> Country
    <span class="token keyword">ELSE</span> City
<span class="token keyword">END</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-stored-procedures" tabindex="-1"><a class="header-anchor" href="#_7-stored-procedures" aria-hidden="true">#</a> 7.Stored Procedures</h2><p>A stored procedure is a prepared SQL code that you can save, so the code can be reused over and over again.</p><p>So if you have an SQL query that you write over and over again, save it as a stored procedure, and then just call it to execute it.</p><p>You can also pass parameters to a stored procedure, so that the stored procedure can act based on the parameter value(s) that is passed.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">#Stored Procedure Syntax</span>
<span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> procedure_name
<span class="token keyword">AS</span>
sql_statement
GO<span class="token punctuation">;</span>

<span class="token comment">#Execute a Stored Procedure</span>
<span class="token keyword">EXEC</span> procedure_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The following SQL statement creates a stored procedure named &quot;SelectAllCustomers&quot; that selects all records from the &quot;Customers&quot; table:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">#A stored procedure named &quot;SelectAllCustomers&quot; that selects all records from the &quot;Customers&quot; table:</span>
<span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> SelectAllCustomers
<span class="token keyword">AS</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Customers
GO<span class="token punctuation">;</span>

<span class="token keyword">EXEC</span> SelectAllCustomers<span class="token punctuation">;</span>

<span class="token comment">#A stored procedure that selects Customers from a particular City from the &quot;Customers&quot; table</span>
<span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> SelectAllCustomers <span class="token variable">@City</span> nvarchar<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>
<span class="token keyword">AS</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Customers <span class="token keyword">WHERE</span> City <span class="token operator">=</span> <span class="token variable">@City</span>
GO<span class="token punctuation">;</span>

<span class="token keyword">EXEC</span> SelectAllCustomers <span class="token variable">@City</span> <span class="token operator">=</span> <span class="token string">&#39;London&#39;</span><span class="token punctuation">;</span>

<span class="token comment">#a stored procedure that selects Customers from a particular City with a particular PostalCode from the &quot;Customers&quot; table:</span>
<span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> SelectAllCustomers <span class="token variable">@City</span> nvarchar<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">@PostalCode</span> nvarchar<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
<span class="token keyword">AS</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Customers <span class="token keyword">WHERE</span> City <span class="token operator">=</span> <span class="token variable">@City</span> <span class="token operator">AND</span> PostalCode <span class="token operator">=</span> <span class="token variable">@PostalCode</span>
GO<span class="token punctuation">;</span>

<span class="token keyword">EXEC</span> SelectAllCustomers <span class="token variable">@City</span> <span class="token operator">=</span> <span class="token string">&#39;London&#39;</span><span class="token punctuation">,</span> <span class="token variable">@PostalCode</span> <span class="token operator">=</span> <span class="token string">&#39;WA1 1DP&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="sql-database" tabindex="-1"><a class="header-anchor" href="#sql-database" aria-hidden="true">#</a> SQL Database</h1>`,155);function k(m,v){const n=p("RouterLink");return c(),i("div",null,[d,s("ul",null,[s("li",null,[a(n,{to:"/blogs/devops/mysql/sql-exercises.html#t177-nth-highest-salary"},{default:e(()=>[t("nth-highest-salary")]),_:1})]),s("li",null,[a(n,{to:"/blogs/devops/mysql/sql-exercises.html#t178-rank-scores"},{default:e(()=>[t("rank-scores")]),_:1})])]),u])}const y=l(r,[["render",k],["__file","sql.html.vue"]]);export{y as default};
