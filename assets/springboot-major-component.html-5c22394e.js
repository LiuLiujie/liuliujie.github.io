import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{o as t,c as e,d as a}from"./app-9e8a13db.js";const o={},i=a('<h1 id="springboot-四大组件" tabindex="-1"><a class="header-anchor" href="#springboot-四大组件" aria-hidden="true">#</a> Springboot 四大组件</h1><p>四大组件分别是：Starter， AutoConfigurator, CLI 以及 Actuator.</p><h2 id="starters" tabindex="-1"><a class="header-anchor" href="#starters" aria-hidden="true">#</a> Starters</h2><ul><li>官方提供的starter是这样的：<code>spring-boot-starter-xxx</code></li><li>非官方的starter是这样的：<code>xxx-spring-boot-starter</code></li></ul><p>通过在pom表引入starter，我们同时引入了其所需的相关依赖和自动配置的文件，同时我们也可以通过yml文件对其进行配置。</p><h2 id="autoconfigure" tabindex="-1"><a class="header-anchor" href="#autoconfigure" aria-hidden="true">#</a> Autoconfigure</h2><p>autoconfigure是与starter同时引入的，是starter中提到的依赖的自动配置的具体实现，负责指导Spring配置Bean实例到Spring容器。</p><ul><li>官方的包的autoconfigure通常会包括在<code>spring-boot-autoconfigure</code>里</li><li>非官方的比如nacos会有单独的starter和autoconfigure的包</li></ul><h2 id="cli" tabindex="-1"><a class="header-anchor" href="#cli" aria-hidden="true">#</a> CLI</h2><p>在官网上的介绍都只有一句话：用于初始化Springboot项目和设置密码</p><h2 id="actuator" tabindex="-1"><a class="header-anchor" href="#actuator" aria-hidden="true">#</a> Actuator</h2><p>Spring Boot的监控插件，本身提供了很多接口可以用于在生产环境下获取当前项目的各项运行状态指标。</p><p>它提供了一系列的端点endpoints供开发者选择性的开启暴露相关信息出来供监控使用，我们可以使用rest API来访问这些端点获取信息。</p>',13),n=[i];function c(s,d){return t(),e("div",null,n)}const p=r(o,[["render",c],["__file","springboot-major-component.html.vue"]]);export{p as default};
