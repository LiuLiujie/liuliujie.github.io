const e=JSON.parse(`{"key":"v-19ed9c6c","path":"/blogs/devops/redis/stream-message-queue.html","title":"Redis Stream MQ 使用Redis Stream 作为消息队列","lang":"en-US","frontmatter":{"category":["Computer Science","Cache","Message Queue"],"tag":["Redis"],"description":"Redis Stream MQ 使用Redis Stream 作为消息队列 Redis Stream 是 Redis 5.0 版本新增加的数据类型，Redis 专门为消息队列设计的数据类型。 在 Redis 5.0 Stream 没出来之前，消息队列的实现方式都有着各自的缺陷，例如： 发布订阅模式，不能持久化也就无法可靠的保存消息，并且对于离线重连的客户端不能读取历史消息的缺陷； List 实现消息队列的方式不能重复消费，一个消息消费完就会被删除，而且生产者需要自行实现全局唯一 ID。 基于以上问题，Redis 5.0 便推出了 Stream 类型也是此版本最重要的功能，用于完美地实现消息队列，它支持消息的持久化、支持自动生成全局唯一 ID、支持 ack 确认消息的模式、支持消费组模式等，让消息队列更加的稳定和可靠。","head":[["meta",{"property":"og:url","content":"https://blog.yujieliu.com/blogs/devops/redis/stream-message-queue.html"}],["meta",{"property":"og:site_name","content":"Yujie's blog"}],["meta",{"property":"og:title","content":"Redis Stream MQ 使用Redis Stream 作为消息队列"}],["meta",{"property":"og:description","content":"Redis Stream MQ 使用Redis Stream 作为消息队列 Redis Stream 是 Redis 5.0 版本新增加的数据类型，Redis 专门为消息队列设计的数据类型。 在 Redis 5.0 Stream 没出来之前，消息队列的实现方式都有着各自的缺陷，例如： 发布订阅模式，不能持久化也就无法可靠的保存消息，并且对于离线重连的客户端不能读取历史消息的缺陷； List 实现消息队列的方式不能重复消费，一个消息消费完就会被删除，而且生产者需要自行实现全局唯一 ID。 基于以上问题，Redis 5.0 便推出了 Stream 类型也是此版本最重要的功能，用于完美地实现消息队列，它支持消息的持久化、支持自动生成全局唯一 ID、支持 ack 确认消息的模式、支持消费组模式等，让消息队列更加的稳定和可靠。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-11-29T21:17:37.000Z"}],["meta",{"property":"article:author","content":"Yujie Liu"}],["meta",{"property":"article:tag","content":"Redis"}],["meta",{"property":"article:modified_time","content":"2023-11-29T21:17:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis Stream MQ 使用Redis Stream 作为消息队列\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-11-29T21:17:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Yujie Liu\\",\\"url\\":\\"https://blog.yujieliu.com/intro.html\\"}]}"]]},"headers":[{"level":2,"title":"简单的消息队列","slug":"简单的消息队列","link":"#简单的消息队列","children":[]},{"level":2,"title":"带消费者组的消息队列","slug":"带消费者组的消息队列","link":"#带消费者组的消息队列","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1701292541000,"updatedTime":1701292657000,"contributors":[{"name":"Yujie","email":"yujie.liu.public@gmail.com","commits":2}]},"readingTime":{"minutes":4.91,"words":1472},"filePathRelative":"blogs/devops/redis/stream-message-queue.md","localizedDate":"November 29, 2023","excerpt":"<h1> Redis Stream MQ 使用Redis Stream 作为消息队列</h1>\\n<p>Redis Stream 是 Redis 5.0 版本新增加的数据类型，Redis 专门为消息队列设计的数据类型。</p>\\n<p>在 Redis 5.0 Stream 没出来之前，消息队列的实现方式都有着各自的缺陷，例如：</p>\\n<ul>\\n<li>发布订阅模式，不能持久化也就无法可靠的保存消息，并且对于离线重连的客户端不能读取历史消息的缺陷；</li>\\n<li>List 实现消息队列的方式不能重复消费，一个消息消费完就会被删除，而且生产者需要自行实现全局唯一 ID。</li>\\n</ul>\\n<p>基于以上问题，Redis 5.0 便推出了 Stream 类型也是此版本最重要的功能，用于完美地实现消息队列，它支持消息的<strong>持久化</strong>、支持自动生成<strong>全局唯一 ID</strong>、支持 <strong>ack 确认消息</strong>的模式、支持<strong>消费组</strong>模式等，让消息队列更加的稳定和可靠。</p>","autoDesc":true}`);export{e as data};
