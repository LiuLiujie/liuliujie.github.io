import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{o as i,c as e,d as s}from"./app-9e8a13db.js";const r={},a=s('<h1 id="redis-data-structure-数据结构" tabindex="-1"><a class="header-anchor" href="#redis-data-structure-数据结构" aria-hidden="true">#</a> Redis Data Structure 数据结构</h1><p>常见的有五种数据类型：<strong>String（字符串），Hash（哈希），List（列表），Set（集合）、Zset（有序集合）</strong></p><p><img src="https://pics.yujieliu.com/blog/2023/11/9d202b2b30aefc1d735affcc48310f46.png" alt="ds"></p><p>Redis 五种数据类型的应用场景：</p><ul><li>String 类型的应用场景：缓存对象、常规计数、分布式锁、共享 session 信息等。</li><li>List 类型的应用场景：消息队列（但是有两个问题：1. 生产者需要自行实现全局唯一 ID；2. 不能以消费组形式消费数据）等。</li><li>Hash 类型：缓存对象、购物车等。</li><li>Set 类型：聚合计算（并集、交集、差集）场景，比如点赞、共同关注、抽奖活动等。</li><li>Zset 类型：排序场景，比如排行榜、电话和姓名排序等。</li></ul><p>Redis 后续版本又支持四种数据类型，它们的应用场景如下：</p><ul><li>BitMap（2.2 版新增）：二值状态统计的场景，比如签到、判断用户登陆状态、连续签到用户总数等；</li><li>HyperLogLog（2.8 版新增）：海量数据基数统计的场景，比如百万级网页 UV 计数等；</li><li>GEO（3.2 版新增）：存储地理位置信息的场景，比如滴滴叫车；</li><li>Stream（5.0 版新增）：消息队列，相比于基于 List 类型实现的消息队列，有这两个特有的特性：自动生成全局唯一消息ID，支持以消费组形式消费数据。</li></ul>',7),l=[a];function c(o,d){return i(),e("div",null,l)}const p=t(r,[["render",c],["__file","data-structure.html.vue"]]);export{p as default};
