const e=JSON.parse(`{"key":"v-14ca017e","path":"/blogs/java/oop-basic.html","title":"面向对象基础","lang":"en-US","frontmatter":{"category":["Computer Science","Programming Language"],"tag":["Java"],"description":"面向对象基础 基本原则 (SOLID) 单一功能SRP：一个类应该只负责一个职责 开闭原则OCP：对扩展开放，对修改封闭 替换原则LSP：子类应当可以替换父类并出现在父类能够出现的任何地方 接口隔离ISP：客户端不应该依赖那些它不需要的接口 依赖反转DIP：要针对接口编程，而不是针对实现编程 封装，继承和多态 封装：把客观事物封装成抽象的类，并且类可以把自己的数据和方法只让可信的类或者对象操作，对不可信的进行信息隐藏。 继承：让某个类型的对象获得父类型的对象的属性的方法。 多态：同一个行为具有多个不同表现形式或形态的能力。","head":[["meta",{"property":"og:url","content":"https://blog.yujieliu.com/blogs/java/oop-basic.html"}],["meta",{"property":"og:site_name","content":"Yujie's blog"}],["meta",{"property":"og:title","content":"面向对象基础"}],["meta",{"property":"og:description","content":"面向对象基础 基本原则 (SOLID) 单一功能SRP：一个类应该只负责一个职责 开闭原则OCP：对扩展开放，对修改封闭 替换原则LSP：子类应当可以替换父类并出现在父类能够出现的任何地方 接口隔离ISP：客户端不应该依赖那些它不需要的接口 依赖反转DIP：要针对接口编程，而不是针对实现编程 封装，继承和多态 封装：把客观事物封装成抽象的类，并且类可以把自己的数据和方法只让可信的类或者对象操作，对不可信的进行信息隐藏。 继承：让某个类型的对象获得父类型的对象的属性的方法。 多态：同一个行为具有多个不同表现形式或形态的能力。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-11-25T09:26:15.000Z"}],["meta",{"property":"article:author","content":"Yujie Liu"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:modified_time","content":"2023-11-25T09:26:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"面向对象基础\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-11-25T09:26:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Yujie Liu\\",\\"url\\":\\"https://blog.yujieliu.com/intro.html\\"}]}"]]},"headers":[{"level":2,"title":"基本原则 (SOLID)","slug":"基本原则-solid","link":"#基本原则-solid","children":[]},{"level":2,"title":"封装，继承和多态","slug":"封装-继承和多态","link":"#封装-继承和多态","children":[]}],"git":{"createdTime":1700904375000,"updatedTime":1700904375000,"contributors":[{"name":"Yujie","email":"yujie.liu.public@gmail.com","commits":1}]},"readingTime":{"minutes":0.76,"words":228},"filePathRelative":"blogs/java/oop-basic.md","localizedDate":"November 25, 2023","excerpt":"<h1> 面向对象基础</h1>\\n<h2> 基本原则 (SOLID)</h2>\\n<ul>\\n<li>\\n<p>单一功能SRP：一个类应该只负责一个职责</p>\\n</li>\\n<li>\\n<p>开闭原则OCP：对扩展开放，对修改封闭</p>\\n</li>\\n<li>\\n<p>替换原则LSP：子类应当可以替换父类并出现在父类能够出现的任何地方</p>\\n</li>\\n<li>\\n<p>接口隔离ISP：客户端不应该依赖那些它不需要的接口</p>\\n</li>\\n<li>\\n<p>依赖反转DIP：要针对接口编程，而不是针对实现编程</p>\\n</li>\\n</ul>\\n<h2> 封装，继承和多态</h2>\\n<ul>\\n<li>\\n<p>封装：把客观事物封装成抽象的类，并且类可以把自己的数据和方法只让可信的类或者对象操作，对不可信的进行信息隐藏。</p>\\n</li>\\n<li>\\n<p>继承：让某个类型的对象获得父类型的对象的属性的方法。</p>\\n</li>\\n<li>\\n<p>多态：同一个行为具有多个不同表现形式或形态的能力。</p>\\n</li>\\n</ul>","autoDesc":true}`);export{e as data};
