import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as a,d as l}from"./app-9e8a13db.js";const r={},o=l('<h1 id="面向对象基础" tabindex="-1"><a class="header-anchor" href="#面向对象基础" aria-hidden="true">#</a> 面向对象基础</h1><h2 id="基本原则-solid" tabindex="-1"><a class="header-anchor" href="#基本原则-solid" aria-hidden="true">#</a> 基本原则 (SOLID)</h2><ul><li><p>单一功能SRP：一个类应该只负责一个职责</p></li><li><p>开闭原则OCP：对扩展开放，对修改封闭</p></li><li><p>替换原则LSP：子类应当可以替换父类并出现在父类能够出现的任何地方</p></li><li><p>接口隔离ISP：客户端不应该依赖那些它不需要的接口</p></li><li><p>依赖反转DIP：要针对接口编程，而不是针对实现编程</p></li></ul><h2 id="封装-继承和多态" tabindex="-1"><a class="header-anchor" href="#封装-继承和多态" aria-hidden="true">#</a> 封装，继承和多态</h2><ul><li><p>封装：把客观事物封装成抽象的类，并且类可以把自己的数据和方法只让可信的类或者对象操作，对不可信的进行信息隐藏。</p></li><li><p>继承：让某个类型的对象获得父类型的对象的属性的方法。</p></li><li><p>多态：同一个行为具有多个不同表现形式或形态的能力。</p></li></ul>',5),t=[o];function c(d,s){return e(),a("div",null,t)}const n=i(r,[["render",c],["__file","oop-basic.html.vue"]]);export{n as default};
