const e=JSON.parse(`{"key":"v-d71daa02","path":"/blogs/hpc/hpc-cpp-interview.html","title":"","lang":"en-US","frontmatter":{"article":false,"description":"HPC C++ Interview Question Collection（Chinese） 网易HPC Interview 构造函数初始化列表与构造函数体内复制的区别 构造函数是否可以放到private里面 构造函数和析构函数是否可以为虚函数 说明static的原理 介绍stl里面的标准库vector 智能指针介绍 如果智能指针放到多线程中如何完成访问共享的对象 讲解一下动态绑定和静态绑定 算法题：Top k 如何用堆排序实现 介绍多态 构造函数为什么不可以为虚函数 析构函数为什么可以是虚函数 B继承A，且有虚析构函数。A* a = new B中如果调用虚析构函数，会调用父类A的析构函数，还是子类B的析构函数 说明static_cast、dynamic_cast、const_cast、reinterpert_cast转换四种的区别 类指针如何用C++转换类别，例如A* a如何转换到B*类型？所有的指针是否都是使用dynamic_cast进行转换的 写一个拷贝构造函数？为什么你写的是引用传递？而不是值传递？（除了效率上的问题外） 算法题：如何判断两个链表相交？ 题1扩展：如果两个链表都有环怎么办？ 如何给链表排序？要求时间复杂度 O(nlogn) 空间复杂度 O(1)","head":[["meta",{"property":"og:url","content":"https://blog.yujieliu.com/blogs/hpc/hpc-cpp-interview.html"}],["meta",{"property":"og:site_name","content":"Yujie's blog"}],["meta",{"property":"og:description","content":"HPC C++ Interview Question Collection（Chinese） 网易HPC Interview 构造函数初始化列表与构造函数体内复制的区别 构造函数是否可以放到private里面 构造函数和析构函数是否可以为虚函数 说明static的原理 介绍stl里面的标准库vector 智能指针介绍 如果智能指针放到多线程中如何完成访问共享的对象 讲解一下动态绑定和静态绑定 算法题：Top k 如何用堆排序实现 介绍多态 构造函数为什么不可以为虚函数 析构函数为什么可以是虚函数 B继承A，且有虚析构函数。A* a = new B中如果调用虚析构函数，会调用父类A的析构函数，还是子类B的析构函数 说明static_cast、dynamic_cast、const_cast、reinterpert_cast转换四种的区别 类指针如何用C++转换类别，例如A* a如何转换到B*类型？所有的指针是否都是使用dynamic_cast进行转换的 写一个拷贝构造函数？为什么你写的是引用传递？而不是值传递？（除了效率上的问题外） 算法题：如何判断两个链表相交？ 题1扩展：如果两个链表都有环怎么办？ 如何给链表排序？要求时间复杂度 O(nlogn) 空间复杂度 O(1)"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-11-25T09:26:15.000Z"}],["meta",{"property":"article:author","content":"Yujie Liu"}],["meta",{"property":"article:modified_time","content":"2023-11-25T09:26:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"\\",\\"description\\":\\"HPC C++ Interview Question Collection（Chinese） 网易HPC Interview 构造函数初始化列表与构造函数体内复制的区别 构造函数是否可以放到private里面 构造函数和析构函数是否可以为虚函数 说明static的原理 介绍stl里面的标准库vector 智能指针介绍 如果智能指针放到多线程中如何完成访问共享的对象 讲解一下动态绑定和静态绑定 算法题：Top k 如何用堆排序实现 介绍多态 构造函数为什么不可以为虚函数 析构函数为什么可以是虚函数 B继承A，且有虚析构函数。A* a = new B中如果调用虚析构函数，会调用父类A的析构函数，还是子类B的析构函数 说明static_cast、dynamic_cast、const_cast、reinterpert_cast转换四种的区别 类指针如何用C++转换类别，例如A* a如何转换到B*类型？所有的指针是否都是使用dynamic_cast进行转换的 写一个拷贝构造函数？为什么你写的是引用传递？而不是值传递？（除了效率上的问题外） 算法题：如何判断两个链表相交？ 题1扩展：如果两个链表都有环怎么办？ 如何给链表排序？要求时间复杂度 O(nlogn) 空间复杂度 O(1)\\"}"]]},"headers":[{"level":2,"title":"HPC C++ Interview Question Collection（Chinese）","slug":"hpc-c-interview-question-collection-chinese","link":"#hpc-c-interview-question-collection-chinese","children":[]},{"level":2,"title":"网易HPC Interview","slug":"网易hpc-interview","link":"#网易hpc-interview","children":[]},{"level":2,"title":"网易有道笔试","slug":"网易有道笔试","link":"#网易有道笔试","children":[]},{"level":2,"title":"华中数控 武汉 C++","slug":"华中数控-武汉-c","link":"#华中数控-武汉-c","children":[]},{"level":2,"title":"字节高性能","slug":"字节高性能","link":"#字节高性能","children":[]}],"git":{"createdTime":1700904375000,"updatedTime":1700904375000,"contributors":[{"name":"Yujie","email":"yujie.liu.public@gmail.com","commits":1}]},"readingTime":{"minutes":3.06,"words":917},"filePathRelative":"blogs/hpc/hpc-cpp-interview.md","localizedDate":"November 25, 2023","excerpt":"<h2> HPC C++ Interview Question Collection（Chinese）</h2>\\n<h2> 网易HPC Interview</h2>\\n<ol>\\n<li>构造函数初始化列表与构造函数体内复制的区别</li>\\n<li>构造函数是否可以放到private里面</li>\\n<li>构造函数和析构函数是否可以为虚函数</li>\\n<li>说明static的原理</li>\\n<li>介绍stl里面的标准库vector</li>\\n<li>智能指针介绍</li>\\n<li>如果智能指针放到多线程中如何完成访问共享的对象</li>\\n<li>讲解一下动态绑定和静态绑定</li>\\n<li>算法题：Top k 如何用堆排序实现</li>\\n<li>介绍多态</li>\\n<li>构造函数为什么不可以为虚函数</li>\\n<li>析构函数为什么可以是虚函数</li>\\n<li>B继承A，且有虚析构函数。A* a = new B中如果调用虚析构函数，会调用父类A的析构函数，还是子类B的析构函数</li>\\n<li>说明static_cast、dynamic_cast、const_cast、reinterpert_cast转换四种的区别</li>\\n<li>类指针如何用C++转换类别，例如A* a如何转换到B*类型？所有的指针是否都是使用dynamic_cast进行转换的</li>\\n<li>写一个拷贝构造函数？为什么你写的是引用传递？而不是值传递？（除了效率上的问题外）</li>\\n<li>算法题：如何判断两个链表相交？</li>\\n<li>题1扩展：如果两个链表都有环怎么办？</li>\\n<li>如何给链表排序？要求时间复杂度 O(nlogn) 空间复杂度 O(1)</li>\\n</ol>","autoDesc":true}`);export{e as data};
