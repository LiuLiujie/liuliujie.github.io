const n=JSON.parse(`{"key":"v-5e8d4b6c","path":"/blogs/java/finally.html","title":"Finally 关键字","lang":"en-US","frontmatter":{"category":["Computer Science","Programming Language"],"tag":["Java"],"description":"Finally 关键字 Java 中的 Finally 关键一般与try一起使用，在程序进入try块之后，无论程序是因为异常而中止或其它方式返回终止的，finally块的内容一定会被执行 。因此我们可以在 finally 代码块中执行关闭连接、关闭文件和释放线程的的操作。 public class Solution { public int testFinally() { int i=0; try { return i++;//先返回再加，因此返回0 } finally { ++i;//try中已经加了，这里再加一次 System.out.println(\\"Finally: \\" + i); } } public static void main(String[] args) { Solution solution = new Solution(); System.out.println(\\"Main: \\"+solution.testFinally()); } }","head":[["meta",{"property":"og:url","content":"https://blog.yujieliu.com/blogs/java/finally.html"}],["meta",{"property":"og:site_name","content":"Yujie's blog"}],["meta",{"property":"og:title","content":"Finally 关键字"}],["meta",{"property":"og:description","content":"Finally 关键字 Java 中的 Finally 关键一般与try一起使用，在程序进入try块之后，无论程序是因为异常而中止或其它方式返回终止的，finally块的内容一定会被执行 。因此我们可以在 finally 代码块中执行关闭连接、关闭文件和释放线程的的操作。 public class Solution { public int testFinally() { int i=0; try { return i++;//先返回再加，因此返回0 } finally { ++i;//try中已经加了，这里再加一次 System.out.println(\\"Finally: \\" + i); } } public static void main(String[] args) { Solution solution = new Solution(); System.out.println(\\"Main: \\"+solution.testFinally()); } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-11-25T09:26:15.000Z"}],["meta",{"property":"article:author","content":"Yujie Liu"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:modified_time","content":"2023-11-25T09:26:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Finally 关键字\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-11-25T09:26:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Yujie Liu\\",\\"url\\":\\"https://blog.yujieliu.com/intro.html\\"}]}"]]},"headers":[{"level":2,"title":"Finally 不执行的情况","slug":"finally-不执行的情况","link":"#finally-不执行的情况","children":[{"level":3,"title":"1. System.exit 函数","slug":"_1-system-exit-函数","link":"#_1-system-exit-函数","children":[]},{"level":3,"title":"2. halt 函数","slug":"_2-halt-函数","link":"#_2-halt-函数","children":[]},{"level":3,"title":"3. 守护线程","slug":"_3-守护线程","link":"#_3-守护线程","children":[]},{"level":3,"title":"4. Try中无限循环","slug":"_4-try中无限循环","link":"#_4-try中无限循环","children":[]}]},{"level":2,"title":"Finally 中返回或抛出会导致try和catch被忽略","slug":"finally-中返回或抛出会导致try和catch被忽略","link":"#finally-中返回或抛出会导致try和catch被忽略","children":[]}],"git":{"createdTime":1700904375000,"updatedTime":1700904375000,"contributors":[{"name":"Yujie","email":"yujie.liu.public@gmail.com","commits":1}]},"readingTime":{"minutes":1.46,"words":437},"filePathRelative":"blogs/java/finally.md","localizedDate":"November 25, 2023","excerpt":"<h1> Finally 关键字</h1>\\n<p>Java 中的 Finally 关键一般与try一起使用，在程序进入try块之后，无论程序是因为异常而中止或其它方式返回终止的，finally块的内容一定会被执行 。因此我们可以在 finally 代码块中执行关闭连接、关闭文件和释放线程的的操作。</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Solution</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">testFinally</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">int</span> i<span class=\\"token operator\\">=</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">try</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">return</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//先返回再加，因此返回0</span>\\n        <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">finally</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token operator\\">++</span>i<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//try中已经加了，这里再加一次</span>\\n            <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Finally: \\"</span> <span class=\\"token operator\\">+</span> i<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> args<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">Solution</span> solution <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Solution</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Main: \\"</span><span class=\\"token operator\\">+</span>solution<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">testFinally</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
