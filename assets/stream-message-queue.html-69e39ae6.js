import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,d as e}from"./app-9e8a13db.js";const t={},p=e(`<h1 id="redis-stream-mq-使用redis-stream-作为消息队列" tabindex="-1"><a class="header-anchor" href="#redis-stream-mq-使用redis-stream-作为消息队列" aria-hidden="true">#</a> Redis Stream MQ 使用Redis Stream 作为消息队列</h1><p>Redis Stream 是 Redis 5.0 版本新增加的数据类型，Redis 专门为消息队列设计的数据类型。</p><p>在 Redis 5.0 Stream 没出来之前，消息队列的实现方式都有着各自的缺陷，例如：</p><ul><li>发布订阅模式，不能持久化也就无法可靠的保存消息，并且对于离线重连的客户端不能读取历史消息的缺陷；</li><li>List 实现消息队列的方式不能重复消费，一个消息消费完就会被删除，而且生产者需要自行实现全局唯一 ID。</li></ul><p>基于以上问题，Redis 5.0 便推出了 Stream 类型也是此版本最重要的功能，用于完美地实现消息队列，它支持消息的<strong>持久化</strong>、支持自动生成<strong>全局唯一 ID</strong>、支持 <strong>ack 确认消息</strong>的模式、支持<strong>消费组</strong>模式等，让消息队列更加的稳定和可靠。</p><h2 id="简单的消息队列" tabindex="-1"><a class="header-anchor" href="#简单的消息队列" aria-hidden="true">#</a> 简单的消息队列</h2><ul><li>生产者通过 <code>XADD</code> 命令插入一条消息 <ul><li>参数：队列名称，是否（部分）指定一个id，key，value</li><li>返回一个时间戳，第一部分表示服务器时间（毫秒），第二部分表示这个毫秒内的第几条数据</li></ul></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#向YJMQ消息队列中插入key为name，值为yujie的消息</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> XADD YJMQ * name yujie
<span class="token string">&quot;1701290357031-0&quot;</span>
<span class="token comment">#这个返回值表示1701290357031毫秒的第一条数据</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>消费者通过<code>XREAD</code>命令从消息队列中读取消息 <ul><li>参数：STREAMS默认，队列名称，从<strong>某一毫秒之后</strong>的消息</li><li>也可以使用<code>BLOCK</code>关键字，选择阻塞一段时间获取消息（当没有消息时）。</li></ul></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#记住是某一毫秒之后的下一条消息，如果直接复制上面存入的id，则会返回nil因为不存在吓一跳</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> XREAD STREAMS YJMQ <span class="token number">1701290357031</span>-0
<span class="token punctuation">(</span>nil<span class="token punctuation">)</span>

<span class="token comment">#因此减一毫秒，获取消息</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> XREAD STREAMS YJMQ <span class="token number">1701290357030</span>-0
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;YJMQ&quot;</span>
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;1701290357031-0&quot;</span>
         <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;name&quot;</span>
            <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;yujie&quot;</span>
 
<span class="token comment">#阻塞10秒获取，$表示只获取新消息，由于之前插入的那条已经被read过，不算新消息了</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> XREAD BLOCK <span class="token number">10000</span> STREAMS mymq $
<span class="token punctuation">(</span>nil<span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token number">10</span>.05s<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>交互流程</p><p><img src="https://pics.yujieliu.com/blog/2023/11/610971b801ac93ff25585132eb2d8379.png" alt="img"></p><p>以上这些使用List也能实现，因此下面的才是新的。</p><h2 id="带消费者组的消息队列" tabindex="-1"><a class="header-anchor" href="#带消费者组的消息队列" aria-hidden="true">#</a> 带消费者组的消息队列</h2><p>Stream 可以以使用 <code>XGROUP</code> 创建消费组，创建消费组之后，Stream 可以使用 <code>XREADGROUP</code> 命令让消费组内的消费者读取消息。</p><p>消息队列中的消息一旦被消费组里的一个消费者读取了，就不能再被该消费组内的其他消费者读取了，即<strong>同一个消费组里的消费者不能消费同一条消息</strong>。但是<strong>不同消费组的消费者可以消费同一条消息</strong>（但是有前提条件，创建消息组的时候，不同消费组指定了相同位置开始读取消息）。</p><ul><li>创建两条从第一条消息开始读的消费者组</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> XGROUP CREATE YJMQ group1 <span class="token number">0</span>-0
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> XGROUP CREATE YJMQ group2 <span class="token number">0</span>-0
OK
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>从消费者组中读取尚未消费的数据</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 使用1组消费者1从YJMQ中读取数据，&gt; 符号表示从第一条未被消费的数据读取</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> XREADGROUP GROUP group1 consumer1 STREAMS YJMQ <span class="token operator">&gt;</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;YJMQ&quot;</span>
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;1701290357031-0&quot;</span>
         <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;name&quot;</span>
            <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;yujie&quot;</span>
            
<span class="token comment">#1组的消费者2读取为空，因为唯一一条消息已经被消费者1读取         </span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> XREADGROUP GROUP group1 consumer2 STREAMS YJMQ <span class="token operator">&gt;</span>
<span class="token punctuation">(</span>nil<span class="token punctuation">)</span>

<span class="token comment">#但是，不同组的，比如2组的消费者1，就可以从该队列中重复获得该消息（由于1组和2组都是从0-0开始）</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> XREADGROUP GROUP group2 consumer1 STREAMS YJMQ <span class="token operator">&gt;</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;YJMQ&quot;</span>
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;1701290357031-0&quot;</span>
         <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;name&quot;</span>
            <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;yujie&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是，使用消费组的目的是让<strong>组内的多个消费者共同分担读取消息</strong>，所以，我们通常会让每个消费者读取部分消息，从而实现消息读取负载在多个消费者间是均衡分布的。</p><ul><li>Streams 会自动使用内部队列（也称为 PENDING List）留存消费组里每个消费者读取的消息，直到消费者使用 <code>XACK</code> 命令通知 Streams“消息已经处理完成”。</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#组1确认一条消息已经被消费</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> XACK YJMQ group1 <span class="token number">1701290357031</span>-0
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>

<span class="token comment">#因此再想获取则获取不到消息了</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> XREADGROUP GROUP group1 consumer2 STREAMS YJMQ <span class="token operator">&gt;</span>
<span class="token punctuation">(</span>nil<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>我们可以使用<code>XPENDING</code>来查看组获取了哪些消息还未确认。 <ul><li>信息：处理中消息的数量，时间范围从哪到哪，具体是哪个消费者持有多个消息</li></ul></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#插入两条消息</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> XADD YJMQ * name1 yujie
<span class="token string">&quot;1701292195759-0&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> XADD YJMQ * name2 yuuuujie
<span class="token string">&quot;1701292210311-0&quot;</span>

<span class="token comment">#获取最新消息，由于这里没有用COUNT约束数量，因此两条都被组1的消费者1获取了</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> XREADGROUP GROUP group1 consumer1 STREAMS YJMQ <span class="token operator">&gt;</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;YJMQ&quot;</span>
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;1701292195759-0&quot;</span>
         <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;name1&quot;</span>
            <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;yujie&quot;</span>
      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;1701292210311-0&quot;</span>
         <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;name2&quot;</span>
            <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;yuuuujie&quot;</span>
<span class="token comment">#查询消息</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> XPENDING YJMQ group1
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;1701292195759-0&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;1701292210311-0&quot;</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;consumer1&quot;</span>
      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;2&quot;</span>
      
<span class="token comment">#确认一下</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> XACK YJMQ group1 <span class="token number">1701292195759</span>-0
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> XACK YJMQ group1 <span class="token number">1701292210311</span>-0
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>消费确认增加了消息的可靠性，一般在业务处理完成之后，需要执行 XACK 命令确认消息已经被消费完成，整个流程的执行如下图所示：</p><p><img src="https://pics.yujieliu.com/blog/2023/11/7860df59b735fa60b4d7fce91d11c599.png" alt="img"></p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ul><li>消息保序：XADD/XREAD</li><li>阻塞读取：XREAD block</li><li>重复消息处理：Stream 在使用 XADD 命令，会自动生成全局唯一 ID；</li><li>消息可靠性：内部使用 PENDING List 自动保存消息，使用 XPENDING 命令查看消费组已经读取但是未被确认的消息，消费者使用 XACK 确认消息；</li><li>支持消费组GROUP形式消费数据</li></ul>`,29),i=[p];function o(l,c){return s(),a("div",null,i)}const d=n(t,[["render",o],["__file","stream-message-queue.html.vue"]]);export{d as default};
