const t=JSON.parse(`{"key":"v-5213a64d","path":"/blogs/algorithm/sorting/heapsort.html","title":"Heapsort 堆排序","lang":"en-US","frontmatter":{"category":"Computer Science","tag":["Algorithms","Sorting Algorithm"],"description":"Heapsort 堆排序 堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。堆排序可以说是一种利用堆的概念来排序的选择排序。分为两种方法： 大顶堆：每个节点的值都大于或等于其子节点的值，在堆排序算法中用于升序排列； 小顶堆：每个节点的值都小于或等于其子节点的值，在堆排序算法中用于降序排列； 堆排序的平均时间复杂度为 Ο(nlogn)。 Java 的 PriorityQueue 的实现方式就是堆排序。","head":[["meta",{"property":"og:url","content":"https://blog.yujieliu.com/blogs/algorithm/sorting/heapsort.html"}],["meta",{"property":"og:site_name","content":"Yujie's blog"}],["meta",{"property":"og:title","content":"Heapsort 堆排序"}],["meta",{"property":"og:description","content":"Heapsort 堆排序 堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。堆排序可以说是一种利用堆的概念来排序的选择排序。分为两种方法： 大顶堆：每个节点的值都大于或等于其子节点的值，在堆排序算法中用于升序排列； 小顶堆：每个节点的值都小于或等于其子节点的值，在堆排序算法中用于降序排列； 堆排序的平均时间复杂度为 Ο(nlogn)。 Java 的 PriorityQueue 的实现方式就是堆排序。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-11-26T09:28:45.000Z"}],["meta",{"property":"article:author","content":"Yujie Liu"}],["meta",{"property":"article:tag","content":"Algorithms"}],["meta",{"property":"article:tag","content":"Sorting Algorithm"}],["meta",{"property":"article:modified_time","content":"2023-11-26T09:28:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Heapsort 堆排序\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-11-26T09:28:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Yujie Liu\\",\\"url\\":\\"https://blog.yujieliu.com/intro.html\\"}]}"]]},"headers":[{"level":2,"title":"完全二叉树表示堆","slug":"完全二叉树表示堆","link":"#完全二叉树表示堆","children":[]},{"level":2,"title":"数组存储堆元素","slug":"数组存储堆元素","link":"#数组存储堆元素","children":[{"level":3,"title":"例子","slug":"例子","link":"#例子","children":[]}]}],"git":{"createdTime":1700990925000,"updatedTime":1700990925000,"contributors":[{"name":"Yujie","email":"yujie.liu.public@gmail.com","commits":1}]},"readingTime":{"minutes":2.42,"words":727},"filePathRelative":"blogs/algorithm/sorting/heapsort.md","localizedDate":"November 26, 2023","excerpt":"<h1> Heapsort 堆排序</h1>\\n<p>堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。堆排序可以说是一种利用堆的概念来排序的选择排序。分为两种方法：</p>\\n<ol>\\n<li>大顶堆：每个节点的值都大于或等于其子节点的值，在堆排序算法中用于升序排列；</li>\\n<li>小顶堆：每个节点的值都小于或等于其子节点的值，在堆排序算法中用于降序排列；</li>\\n</ol>\\n<p>堆排序的平均时间复杂度为 Ο(nlogn)。</p>\\n<ul>\\n<li>Java 的 <a href=\\"/blogs/java/java-collection/priority-queue.html\\" target=\\"blank\\">PriorityQueue</a> 的实现方式就是堆排序。</li>\\n</ul>","autoDesc":true}`);export{t as data};
