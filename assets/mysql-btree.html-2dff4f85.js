const e=JSON.parse(`{"key":"v-6c6f0128","path":"/blogs/devops/mysql/mysql-btree.html","title":"MySQL 索引 (B+ Tree)","lang":"en-US","frontmatter":{"category":["Computer Science","Database"],"tag":["MySQL"],"description":"MySQL 索引 (B+ Tree) B+ Tree B Tree 指的是 Balance Tree，也就是平衡树。平衡树是一颗查找树，并且所有叶子节点位于同一层。 B+ Tree 是基于 B Tree 和叶子节点顺序访问指针进行实现，它具有 B Tree 的平衡性，并且通过顺序访问指针来提高区间查询的性能。 在 B+ Tree 中，一个节点中的 key 从左到右非递减排列，如果某个指针的左右相邻 key 分别是 keyi 和 keyi+1，且不为 null，则该指针指向节点的所有 key 大于等于 keyi 且小于等于 keyi+1。即一个要查询的值比当前key大，但是比下一个key小，则该值一定在当前key的子节点中。","head":[["meta",{"property":"og:url","content":"https://blog.yujieliu.com/blogs/devops/mysql/mysql-btree.html"}],["meta",{"property":"og:site_name","content":"Yujie's blog"}],["meta",{"property":"og:title","content":"MySQL 索引 (B+ Tree)"}],["meta",{"property":"og:description","content":"MySQL 索引 (B+ Tree) B+ Tree B Tree 指的是 Balance Tree，也就是平衡树。平衡树是一颗查找树，并且所有叶子节点位于同一层。 B+ Tree 是基于 B Tree 和叶子节点顺序访问指针进行实现，它具有 B Tree 的平衡性，并且通过顺序访问指针来提高区间查询的性能。 在 B+ Tree 中，一个节点中的 key 从左到右非递减排列，如果某个指针的左右相邻 key 分别是 keyi 和 keyi+1，且不为 null，则该指针指向节点的所有 key 大于等于 keyi 且小于等于 keyi+1。即一个要查询的值比当前key大，但是比下一个key小，则该值一定在当前key的子节点中。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-11-30T20:30:13.000Z"}],["meta",{"property":"article:author","content":"Yujie Liu"}],["meta",{"property":"article:tag","content":"MySQL"}],["meta",{"property":"article:modified_time","content":"2023-11-30T20:30:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MySQL 索引 (B+ Tree)\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-11-30T20:30:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Yujie Liu\\",\\"url\\":\\"https://blog.yujieliu.com/intro.html\\"}]}"]]},"headers":[{"level":2,"title":"B+ Tree","slug":"b-tree","link":"#b-tree","children":[{"level":3,"title":"操作","slug":"操作","link":"#操作","children":[]},{"level":3,"title":"与红黑树的比较","slug":"与红黑树的比较","link":"#与红黑树的比较","children":[]}]},{"level":2,"title":"MySQL 索引类型","slug":"mysql-索引类型","link":"#mysql-索引类型","children":[{"level":3,"title":"B+Tree 索引","slug":"b-tree-索引","link":"#b-tree-索引","children":[]},{"level":3,"title":"哈希索引","slug":"哈希索引","link":"#哈希索引","children":[]},{"level":3,"title":"全文索引","slug":"全文索引","link":"#全文索引","children":[]},{"level":3,"title":"空间数据索引","slug":"空间数据索引","link":"#空间数据索引","children":[]}]},{"level":2,"title":"索引优化","slug":"索引优化","link":"#索引优化","children":[{"level":3,"title":"独立的列：避免索引失效","slug":"独立的列-避免索引失效","link":"#独立的列-避免索引失效","children":[]},{"level":3,"title":"联合索引 > 单列索引","slug":"联合索引-单列索引","link":"#联合索引-单列索引","children":[]},{"level":3,"title":"索引列的顺序","slug":"索引列的顺序","link":"#索引列的顺序","children":[]},{"level":3,"title":"前缀索引：对BLOB, TEXT 和 VARCHAR","slug":"前缀索引-对blob-text-和-varchar","link":"#前缀索引-对blob-text-和-varchar","children":[]},{"level":3,"title":"覆盖索引：使索引包含所有需要查询的字段","slug":"覆盖索引-使索引包含所有需要查询的字段","link":"#覆盖索引-使索引包含所有需要查询的字段","children":[]}]},{"level":2,"title":"索引失效","slug":"索引失效","link":"#索引失效","children":[]},{"level":2,"title":"选错索引","slug":"选错索引","link":"#选错索引","children":[]},{"level":2,"title":"索引的优点","slug":"索引的优点","link":"#索引的优点","children":[]},{"level":2,"title":"索引的使用场景","slug":"索引的使用场景","link":"#索引的使用场景","children":[]}],"git":{"createdTime":1700904375000,"updatedTime":1701376213000,"contributors":[{"name":"Yujie","email":"yujie.liu.public@gmail.com","commits":5}]},"readingTime":{"minutes":7.47,"words":2241},"filePathRelative":"blogs/devops/mysql/mysql-btree.md","localizedDate":"November 25, 2023","excerpt":"<h1> MySQL 索引 (B+ Tree)</h1>\\n<h2> B+ Tree</h2>\\n<p>B Tree 指的是 Balance Tree，也就是平衡树。平衡树是一颗查找树，并且所有叶子节点位于同一层。</p>\\n<p>B+ Tree 是基于 B Tree 和叶子节点顺序访问指针进行实现，它具有 B Tree 的平衡性，并且通过顺序访问指针来提高区间查询的性能。</p>\\n<p>在 B+ Tree 中，一个节点中的 key 从左到右非递减排列，如果某个指针的左右相邻 key 分别是 keyi 和 keyi+1，且不为 null，则该指针指向节点的所有 key 大于等于 keyi 且小于等于 keyi+1。即一个要查询的值比当前key大，但是比下一个key小，则该值一定在当前key的子节点中。</p>","autoDesc":true}`);export{e as data};
