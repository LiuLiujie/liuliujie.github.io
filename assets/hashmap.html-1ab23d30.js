const e=JSON.parse(`{"key":"v-2af66932","path":"/blogs/java/java-collection/hashmap.html","title":"HashMap详解","lang":"en-US","frontmatter":{"description":"HashMap详解 1.7与1.8的数据结构 Put过程 主要流程 计算哈希值 根据取模运算，获取对应的桶的位置 插入值到桶中，需要考虑哈希冲突 如果桶为空，直接插入 如果桶不为空，则检查桶对应的链表或红黑树是否有相同key，若相同则替换value，否则插入新node。如果是插入链表，插入完成后检查是否需要树化（默认8）。 检查是否需要扩容（默认16）","head":[["meta",{"property":"og:url","content":"https://blog.yujieliu.com/blogs/java/java-collection/hashmap.html"}],["meta",{"property":"og:site_name","content":"Yujie's blog"}],["meta",{"property":"og:title","content":"HashMap详解"}],["meta",{"property":"og:description","content":"HashMap详解 1.7与1.8的数据结构 Put过程 主要流程 计算哈希值 根据取模运算，获取对应的桶的位置 插入值到桶中，需要考虑哈希冲突 如果桶为空，直接插入 如果桶不为空，则检查桶对应的链表或红黑树是否有相同key，若相同则替换value，否则插入新node。如果是插入链表，插入完成后检查是否需要树化（默认8）。 检查是否需要扩容（默认16）"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-03-15T17:45:22.000Z"}],["meta",{"property":"article:author","content":"Yujie Liu"}],["meta",{"property":"article:modified_time","content":"2024-03-15T17:45:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"HashMap详解\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-15T17:45:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Yujie Liu\\",\\"url\\":\\"https://blog.yujieliu.com/intro.html\\"}]}"]]},"headers":[{"level":2,"title":"1.7与1.8的数据结构","slug":"_1-7与1-8的数据结构","link":"#_1-7与1-8的数据结构","children":[]},{"level":2,"title":"Put过程","slug":"put过程","link":"#put过程","children":[{"level":3,"title":"主要流程","slug":"主要流程","link":"#主要流程","children":[]}]}],"git":{"createdTime":1710524722000,"updatedTime":1710524722000,"contributors":[{"name":"Jeff Liu","email":"47711081+LiuLiujie@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":0.46,"words":137},"filePathRelative":"blogs/java/java-collection/hashmap.md","localizedDate":"March 15, 2024","excerpt":"<h1> HashMap详解</h1>\\n<h2> 1.7与1.8的数据结构</h2>\\n<h2> Put过程</h2>\\n<h3> 主要流程</h3>\\n<ol>\\n<li>\\n<p>计算哈希值</p>\\n</li>\\n<li>\\n<p>根据取模运算，获取对应的桶的位置</p>\\n</li>\\n<li>\\n<p>插入值到桶中，需要考虑哈希冲突</p>\\n<ul>\\n<li>\\n<p>如果桶为空，直接插入</p>\\n</li>\\n<li>\\n<p>如果桶不为空，则检查桶对应的链表或红黑树是否有相同key，若相同则替换value，否则插入新node。如果是插入链表，插入完成后检查是否需要树化（默认8）。</p>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p>检查是否需要扩容（默认16）</p>\\n</li>\\n</ol>","autoDesc":true}`);export{e as data};
