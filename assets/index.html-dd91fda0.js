import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as n,c as h,a as e,e as d,w as o,d as r,b as a}from"./app-9e8a13db.js";const s={},l=r('<h1 id="cuda-tutorial-chinese" tabindex="-1"><a class="header-anchor" href="#cuda-tutorial-chinese" aria-hidden="true">#</a> CUDA Tutorial Chinese</h1><h2 id="内核启动" tabindex="-1"><a class="header-anchor" href="#内核启动" aria-hidden="true">#</a> 内核启动</h2><p>在CUDA中，启动内核函数时可以传递以下参数：</p><ol><li>网格维度（Grid Dimension）：指定了在GPU上启动的线程块的数量和排列方式。使用<code>dim3</code>类型的变量来表示，可以指定三个维度（x、y和z）。例如，<code>dim3 gridDim(16, 8, 1);</code>表示启动了一个大小为16x8的二维线程块网格。</li><li>块维度（Block Dimension）：指定了每个线程块中的线程数量和排列方式。同样，使用<code>dim3</code>类型的变量来表示。例如，<code>dim3 blockDim(256, 1, 1);</code>表示每个线程块中有256个线程。</li><li>动态共享内存大小（Dynamic Shared Memory）：在启动内核时，可以为每个线程块分配一定大小的动态共享内存。通过在内核函数调用中使用<code>&lt;&lt;&lt;...&gt;&gt;&gt;</code>语法来指定共享内存的大小。例如，<code>myKernel&lt;&lt;&lt;gridDim, blockDim, sharedMemSize&gt;&gt;&gt;();</code>表示为每个线程块分配了<code>sharedMemSize</code>字节的动态共享内存。</li><li>流（Stream）：可选参数，用于指定内核执行的流。流可以用于控制内核的执行顺序和并发性。默认情况下，使用默认流。可以使用<code>cudaStream_t</code>类型的变量来表示流。</li></ol><h2 id="内存模型" tabindex="-1"><a class="header-anchor" href="#内存模型" aria-hidden="true">#</a> 内存模型</h2>',5),m=r('<h2 id="q-a" tabindex="-1"><a class="header-anchor" href="#q-a" aria-hidden="true">#</a> Q&amp;A</h2><h3 id="what-s-the-difference-of-syncthreads-and-cudadevicesynchronize" tabindex="-1"><a class="header-anchor" href="#what-s-the-difference-of-syncthreads-and-cudadevicesynchronize" aria-hidden="true">#</a> What&#39;s the difference of <code>__syncthreads()</code> and <code>cudaDeviceSynchronize()</code> ?</h3><p><code>__syncthreads()</code>和<code>cudaDeviceSynchronize()</code>是CUDA编程中用于同步线程和设备的函数，它们在功能和使用上有一些区别。</p><p><code>__syncthreads()</code>是在CUDA线程块 (thread block) 内部使用的同步函数，是一个<strong>设备函数</strong>（<code>__decive__</code>函数）。它的作用是让线程块内的所有线程在执行到该函数时等待（thread barrier），直到线程块内的所有线程都执行完毕后才会继续执行后面的指令。它用于确保线程块内的线程之间的同步，常用于处理共享内存的数据一致性和协同工作（arrange shared memory to avoid data race）。需要注意的是，<code>__syncthreads()</code>只能在同一个线程块内使用，不能跨线程块同步。</p><p><code>cudaDeviceSynchronize()</code>是在CUDA设备上使用的同步函数，是一个<strong>主机函数</strong>（<code>__host__</code>函数）。它的作用是阻塞主机线程直到设备上的所有（异步）任务都执行完成，比如内核调用（kernel calls）和异步内存辅助（async memory copies）。</p><p><strong>需要注意的点有：</strong></p><ol><li>由于<code>cudaDeviceSynchronize()</code>是主机函数，因此常在main函数或者主机主机函数中调用，而无法在全局函数（<code>__global__</code>函数）中调用。</li><li>当没有指定内核运行的流时，即使用默认流（default stream），<code>cudaDeviceSynchronize()</code>会在内核启动前和完成后被隐式调用。</li></ol>',7);function _(u,f){const c=t("RouterLink");return n(),h("div",null,[l,e("ol",null,[e("li",null,[d(c,{to:"/blogs/hpc/cuda-tutorial-chinese/shared-memory-bank.html"},{default:o(()=>[a("Shared Memory Bank")]),_:1})]),e("li",null,[d(c,{to:"/blogs/hpc/cuda-tutorial-chinese/memory-fence.html"},{default:o(()=>[a("Memory Fence")]),_:1})])]),m])}const g=i(s,[["render",_],["__file","index.html.vue"]]);export{g as default};
