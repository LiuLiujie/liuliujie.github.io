import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as e,c,a as n,b as s,e as t,d as i}from"./app-9e8a13db.js";const l={},u=n("h1",{id:"nacos-进行配置管理",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#nacos-进行配置管理","aria-hidden":"true"},"#"),s(" Nacos 进行配置管理")],-1),r={href:"http://localhost:8848/nacos",target:"_blank",rel:"noopener noreferrer"},k=n("p",null,"比如，我的一个Springboot项目中就用到了下面这种配置方式，主要用到的就是properties和YAML两种",-1),d=n("img",{src:"https://pics.yujieliu.com/blog/2023/12/62beff5a51a74ea950df549034cc83cf.png",alt:"Screenshot 2023-12-06 at 21.02.25",style:{zoom:"50%"}},null,-1),v=n("h2",{id:"使用java-sdk进行配置",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#使用java-sdk进行配置","aria-hidden":"true"},"#"),s(" 使用Java SDK进行配置")],-1),m={href:"https://nacos.io/zh-cn/docs/guide/user/sdk",target:"_blank",rel:"noopener noreferrer"},g=i(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Log4j2</span>
<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NacosConfigService</span> <span class="token keyword">implements</span> <span class="token class-name">ConfigService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${api-monitor.config.nacos.server}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> nacosServer<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${api-monitor.config.nacos.username}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> nacosUsername <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${api-monitor.config.nacos.password}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> nacosPassword <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${api-monitor.config.nacos.group}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> nacosGroup<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${api-monitor.config.nacos.data-id}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> nacosDataId<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Properties</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> property <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringReader</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Nacos error:{}&quot;</span><span class="token punctuation">,</span> <span class="token class-name">ExceptionUtils</span><span class="token punctuation">.</span><span class="token function">getStackTrace</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">String</span> property <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> property <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token operator">?</span> property <span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> context <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            request<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">PropertyKeyConst</span><span class="token punctuation">.</span><span class="token constant">SERVER_ADDR</span><span class="token punctuation">,</span> nacosServer<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>nacosUsername <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>nacosUsername<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                request<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">PropertyKeyConst</span><span class="token punctuation">.</span><span class="token constant">USERNAME</span><span class="token punctuation">,</span> nacosUsername<span class="token punctuation">)</span><span class="token punctuation">;</span>
                request<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">PropertyKeyConst</span><span class="token punctuation">.</span><span class="token constant">PASSWORD</span><span class="token punctuation">,</span> nacosPassword<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            context <span class="token operator">=</span> <span class="token class-name">NacosFactory</span><span class="token punctuation">.</span><span class="token function">createConfigService</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">getConfig</span><span class="token punctuation">(</span>nacosDataId<span class="token punctuation">,</span> nacosGroup<span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NacosException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Nacos error:{}&quot;</span><span class="token punctuation">,</span> <span class="token class-name">ExceptionUtils</span><span class="token punctuation">.</span><span class="token function">getStackTrace</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> context<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用springboot原生注解" tabindex="-1"><a class="header-anchor" href="#使用springboot原生注解" aria-hidden="true">#</a> 使用Springboot原生注解</h2>`,2),b={href:"https://nacos.io/zh-cn/docs/ecology/use-nacos-with-spring-boot",target:"_blank",rel:"noopener noreferrer"},h=n("p",null,"使用原生注解有一个问题，就是@Conditionalxxxxx这样的注解是在新版中才支持注入的，这主要是和Bean的生命周期有关需要Nacos在Bean更早的生命阶段进行获取配置然后条件注入Bean。",-1),f=n("h2",{id:"使用springcloud原生注解",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#使用springcloud原生注解","aria-hidden":"true"},"#"),s(" 使用SpringCloud原生注解")],-1),y={href:"https://nacos.io/zh-cn/docs/ecology/use-nacos-with-spring-cloud",target:"_blank",rel:"noopener noreferrer"};function _(w,S){const a=o("ExternalLinkIcon");return e(),c("div",null,[u,n("p",null,[s("Nacos支持多种配置管理模式，当已经启动一个nacos实例后，访问"),n("a",r,[s("http://localhost:8848/nacos"),t(a)]),s("就能访问nacos的Dashboard，可以看到有以下支持。")]),k,d,v,n("p",null,[s("官方文档在"),n("a",m,[s("这里"),t(a)]),s("，我的需求主要只是获取相关的配置而不是发布，因此只实现了获取相关配置的接口。可以看到这种方式需要进行Bean的注册通过调用Bean的方式进行实现")]),g,n("p",null,[n("a",b,[s("官方文档"),t(a)])]),h,f,n("p",null,[n("a",y,[s("官方文档"),t(a)])])])}const N=p(l,[["render",_],["__file","configuration-management.html.vue"]]);export{N as default};
